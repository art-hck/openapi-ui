{
  "openapi": "3.0.3",
  "info": {
    "version": "3.0.3",
    "title": "Policy daemon API"
  },
  "servers": [
    {
      "url": "http://localhost:9000/api"
    }
  ],
  "paths": {
    "/i18n/messages/{id}": {
      "get": {
        "summary": "Переводы UI",
        "tags": [
          "I18nMessages"
        ],
        "description": "Список активных приложений пользователя",
        "operationId": "messages",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "id персоны в url",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "key": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/status": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "description": "Get Auth status",
        "operationId": "status",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthStatus"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "Get Auth status",
        "operationId": "login",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthCredentials"
              },
              "example": {
                "login": "admin",
                "password": "@A1@A1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthStatus"
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "Get Auth status",
        "operationId": "logout",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/auth/roles/{id}": {
      "get": {
        "tags": [
          "Role"
        ],
        "description": "Get detailed information about role",
        "operationId": "getRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Role"
        ],
        "description": "Copy role",
        "operationId": "copyRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBrief"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Role"
        ],
        "description": "Update role",
        "operationId": "updateRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Role updated"
          }
        }
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "description": "Remove role",
        "operationId": "deleteRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete role"
          }
        }
      }
    },
    "/auth/roles": {
      "get": {
        "tags": [
          "Role"
        ],
        "description": "Get list of roles",
        "operationId": "getRoles",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleBrief"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Role"
        ],
        "description": "Create role",
        "operationId": "createRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleEntity"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBrief"
                }
              }
            }
          }
        }
      }
    },
    "/auth/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get information about user",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "description": "Update user",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "roles"
                ],
                "properties": {
                  "password": {
                    "type": "string"
                  },
                  "blocked": {
                    "type": "boolean"
                  },
                  "isLocal": {
                    "type": "boolean"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User updated"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "description": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete user"
          }
        }
      }
    },
    "/auth/users": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get list of users",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserBrief"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "description": "Create user",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "login",
                  "password",
                  "roles"
                ],
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "blocked": {
                    "type": "boolean"
                  },
                  "isLocal": {
                    "type": "boolean"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/auth/users/blocked/{id}": {
      "put": {
        "tags": [
          "User"
        ],
        "description": "Block user",
        "operationId": "blockUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User blocked"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "description": "Unblock user",
        "operationId": "unblockUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User unblocked"
          }
        }
      }
    },
    "/auth/groups/{id}": {
      "get": {
        "tags": [
          "LDAPGroup"
        ],
        "description": "Get detailed information about group",
        "operationId": "getGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LDAPGroup"
        ],
        "description": "Remove group",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete group"
          }
        }
      }
    },
    "/auth/groups": {
      "get": {
        "tags": [
          "LDAPGroup"
        ],
        "description": "Get detailed information about group",
        "operationId": "getAllLDAPGroups",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LDAPGroup"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LDAPGroup"
        ],
        "description": "Create or update group",
        "operationId": "createOrUpdateGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LDAPGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPGroup"
                }
              }
            }
          }
        }
      }
    },
    "/auth/passwd": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "operationId": "changePassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/license": {
      "post": {
        "tags": [
          "license"
        ],
        "operationId": "setLicense",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "csrfToken",
                  "license"
                ],
                "properties": {
                  "csrfToken": {
                    "type": "string"
                  },
                  "license": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/license/eula": {
      "get": {
        "tags": [
          "license"
        ],
        "operationId": "getLicenseEula",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/license/brief": {
      "get": {
        "tags": [
          "license"
        ],
        "operationId": "getLicenseBrief",
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseBrief"
                }
              }
            }
          }
        }
      }
    },
    "/api/hosts-by-role/{id}": {
      "get": {
        "tags": [
          "Hosts"
        ],
        "description": "Get Hosts by Role",
        "operationId": "getHostsByRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Read all Hosts by Role",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/access-log/grafana/api/search": {
      "get": {
        "tags": [
          "Grafana"
        ],
        "description": "Executing request in Clickhouse",
        "operationId": "search",
        "parameters": [
          {
            "in": "query",
            "name": "node",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrafanaDashboardItem"
                }
              }
            }
          }
        }
      }
    },
    "/api/access-log/grafana/api/dashboards/uid/{id}": {
      "get": {
        "tags": [
          "Grafana"
        ],
        "description": "Getting list of widgets",
        "operationId": "dashboard",
        "parameters": [
          {
            "description": "Grafana Dashboard ID",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrafanaDashboard"
                }
              }
            }
          }
        }
      }
    },
    "/api/network/topology/nodes": {
      "get": {
        "tags": [
          "Topology"
        ],
        "summary": "List configured nodes",
        "description": "Getting nodes which managed by the network config agent.\n\nNOTE: List will be sorted by subcluster name and node name fields.\n",
        "operationId": "listConfiguredNodes",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParameter"
          },
          {
            "$ref": "#/components/parameters/limitParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nodes"
                }
              }
            }
          },
          "400": {
            "description": "Request parameters validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/network/routing/apply": {
      "post": {
        "tags": [
          "Routing Maintenance"
        ],
        "summary": "Apply routing configuration",
        "operationId": "applyRoutingConf",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Applied routing configuration"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/network/routing/config": {
      "get": {
        "tags": [
          "Routing Maintenance"
        ],
        "summary": "Get current routing configuration",
        "operationId": "getRoutingConf",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "404": {
            "description": "Config resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/network/routing/status": {
      "get": {
        "tags": [
          "Routing Maintenance"
        ],
        "summary": "Get current routing configuration status",
        "operationId": "getRoutingStatus",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigStatusInfo"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/network/routing/routes/connected": {
      "get": {
        "tags": [
          "Connected Routes"
        ],
        "summary": "List all connected routes",
        "description": "NOTE: List will be sorted by name field.\n",
        "operationId": "listConnectedRoutes",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParameter"
          },
          {
            "$ref": "#/components/parameters/limitParameter"
          },
          {
            "$ref": "#/components/parameters/filterByNodeIdParameter"
          },
          {
            "$ref": "#/components/parameters/filterByStatusParameter"
          },
          {
            "$ref": "#/components/parameters/queryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectedRoutes"
                }
              }
            }
          },
          "400": {
            "description": "Request parameters validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/network/routing/routes/connected/{id}": {
      "get": {
        "tags": [
          "Connected Routes"
        ],
        "summary": "Get connected route information by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/routeIdParameter"
          }
        ],
        "operationId": "getConnectedRoute",
        "responses": {
          "200": {
            "description": "Route found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectedRouteInfo"
                }
              }
            }
          },
          "404": {
            "description": "Route not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Connected Routes"
        ],
        "summary": "Update connected route",
        "parameters": [
          {
            "$ref": "#/components/parameters/routeIdParameter"
          }
        ],
        "description": "NOTE: Only 'name' field can be changed for connected route.\n",
        "operationId": "updateConnectedRoute",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectedRouteUpdateReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Route updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectedRouteInfo"
                }
              }
            }
          },
          "400": {
            "description": "Request data validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "Route not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "409": {
            "description": "Route with such configuration already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/network/routing/routes/static": {
      "get": {
        "tags": [
          "Static Routes"
        ],
        "summary": "List static routes",
        "description": "NOTE: List will be sorted by name field.\n",
        "operationId": "listStaticRoutes",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParameter"
          },
          {
            "$ref": "#/components/parameters/limitParameter"
          },
          {
            "$ref": "#/components/parameters/filterByNodeIdParameter"
          },
          {
            "$ref": "#/components/parameters/filterByNetTypeParameter"
          },
          {
            "$ref": "#/components/parameters/filterByStatusParameter"
          },
          {
            "$ref": "#/components/parameters/filterByEnabledParameter"
          },
          {
            "$ref": "#/components/parameters/queryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticRoutes"
                }
              }
            }
          },
          "400": {
            "description": "Request parameters validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Static Routes"
        ],
        "summary": "Create new static route",
        "operationId": "createStaticRoute",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaticRouteCreateReq"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New route created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticRouteInfo"
                }
              }
            }
          },
          "400": {
            "description": "Request data validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "409": {
            "description": "Route with such configuration already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/network/routing/routes/static/{id}": {
      "get": {
        "tags": [
          "Static Routes"
        ],
        "summary": "Get static route information",
        "parameters": [
          {
            "$ref": "#/components/parameters/routeIdParameter"
          }
        ],
        "operationId": "getStaticRoute",
        "responses": {
          "200": {
            "description": "Route found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticRouteInfo"
                }
              }
            }
          },
          "404": {
            "description": "Route not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Static Routes"
        ],
        "summary": "Update static route",
        "parameters": [
          {
            "$ref": "#/components/parameters/routeIdParameter"
          }
        ],
        "operationId": "updateStaticRoute",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaticRouteUpdateReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Route updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticRouteInfo"
                }
              }
            }
          },
          "400": {
            "description": "Request data validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "Route not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "409": {
            "description": "Route with such configuration already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Static Routes"
        ],
        "summary": "Enable/disable static route",
        "parameters": [
          {
            "$ref": "#/components/parameters/routeIdParameter"
          }
        ],
        "operationId": "enableStaticRoute",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaticRouteEnableReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticRouteInfo"
                }
              }
            }
          },
          "400": {
            "description": "Request data validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "Route not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Static Routes"
        ],
        "summary": "Delete static route",
        "parameters": [
          {
            "$ref": "#/components/parameters/routeIdParameter"
          }
        ],
        "operationId": "removeStaticRoute",
        "responses": {
          "204": {
            "description": "Ok"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/network/rules": {
      "get": {
        "tags": [
          "NetworkLayer"
        ],
        "description": "Read all Network layer rules",
        "operationId": "readRules",
        "parameters": [
          {
            "name": "section",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Read all Network layer rules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NetworkLayerRule"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create Network layer rules",
        "tags": [
          "NetworkLayer"
        ],
        "operationId": "createRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkLayerRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created Network rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkLayerRule"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/network/rules/{id}": {
      "delete": {
        "tags": [
          "NetworkLayer"
        ],
        "description": "Remove Network rule",
        "operationId": "removeRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Removed Network rule"
          }
        }
      },
      "put": {
        "tags": [
          "NetworkLayer"
        ],
        "description": "Update Network rule",
        "operationId": "updateRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkLayerRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Network rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkLayerRule"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "NetworkLayer"
        ],
        "description": "Update enabled/disabled Network rule with id",
        "operationId": "enableRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkLayerRuleUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created new rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkLayerRule"
                }
              }
            }
          },
          "404": {
            "description": "Rule not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkLayerRule"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "NetworkLayer"
        ],
        "description": "Move Network rule",
        "operationId": "moveRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/afterId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Request layer with id not found"
          }
        }
      }
    },
    "/api/layers/nat/rules": {
      "get": {
        "tags": [
          "NatLayer"
        ],
        "description": "Read all Nat layer rules",
        "operationId": "readRules",
        "responses": {
          "200": {
            "description": "Read all Nat layer rules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NatLayerRule"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create Nat layer rules",
        "tags": [
          "NatLayer"
        ],
        "operationId": "createRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NatLayerRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created Nat rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NatLayerRule"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/nat/rules/{id}": {
      "delete": {
        "tags": [
          "NatLayer"
        ],
        "description": "Remove Nat rule",
        "operationId": "removeRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Removed Nat rule"
          }
        }
      },
      "put": {
        "tags": [
          "NatLayer"
        ],
        "description": "Update Nat rule",
        "operationId": "updateRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NatLayerRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Nat rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NatLayerRule"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "NatLayer"
        ],
        "description": "Update enabled/disabled Nat rule with id",
        "operationId": "enableRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NatLayerRuleUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created new rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NatLayerRule"
                }
              }
            }
          },
          "404": {
            "description": "Rule not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NatLayerRule"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "NatLayer"
        ],
        "description": "Move Nat rule",
        "operationId": "moveRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/afterId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Request layer with id not found"
          }
        }
      }
    },
    "/api/layers/dpi/rules": {
      "get": {
        "tags": [
          "DpiLayer"
        ],
        "description": "Read all DPI layer rules",
        "operationId": "readDpiRules",
        "responses": {
          "200": {
            "description": "Read all DPI layer rules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DpiLayerRule"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create DPI layer rules",
        "tags": [
          "DpiLayer"
        ],
        "operationId": "createDpiRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DpiLayerRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created DPI rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DpiLayerRule"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/dpi/rules/{id}": {
      "delete": {
        "tags": [
          "DpiLayer"
        ],
        "description": "Remove DPI rule",
        "operationId": "removeDpiRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Removed DPI rule"
          }
        }
      },
      "put": {
        "tags": [
          "DpiLayer"
        ],
        "description": "Update DPI rule",
        "operationId": "updateDpiRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DpiLayerRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated DPI rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DpiLayerRule"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DpiLayer"
        ],
        "description": "Update enabled/disabled DPI rule with id",
        "operationId": "enableDpiRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DpiLayerRuleUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created new rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DpiLayerRule"
                }
              }
            }
          },
          "404": {
            "description": "Rule not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DpiLayerRule"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DpiLayer"
        ],
        "description": "Move DPI rule",
        "operationId": "moveDpiRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/afterId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Request layer with id not found"
          }
        }
      }
    },
    "/api/layers/dpi/protocols": {
      "get": {
        "tags": [
          "DpiProtocols"
        ],
        "description": "Read list of DPI protocols",
        "operationId": "getProtocols",
        "responses": {
          "200": {
            "description": "Read list of DPI protocols",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DpiProtocolsListItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/auth/rules": {
      "get": {
        "tags": [
          "AuthLayer"
        ],
        "description": "Read all authentication layer exclusions",
        "operationId": "readAuthExclusions",
        "responses": {
          "200": {
            "description": "Read all authentication layer exclusions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthLayerExclusion"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create auth layer exclusion",
        "tags": [
          "AuthLayer"
        ],
        "operationId": "createAuthExclusion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthLayerExclusion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created authentication exclusion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthLayerExclusion"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/auth/rules/{id}": {
      "delete": {
        "tags": [
          "AuthLayer"
        ],
        "description": "Remove authentication exclusion",
        "operationId": "removeAuthExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Removed authentication exclusion"
          }
        }
      },
      "put": {
        "tags": [
          "AuthLayer"
        ],
        "description": "Update authentication exclusion",
        "operationId": "updateAuthExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthLayerExclusion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated authentication exclusion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthLayerExclusion"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "AuthLayer"
        ],
        "description": "Update enabled/disabled auth exclusion with id",
        "operationId": "enableAuthExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authLayerExclusionUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created new exclusion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthLayerExclusion"
                }
              }
            }
          },
          "404": {
            "description": "Exclusion not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthLayerExclusion"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AuthLayer"
        ],
        "description": "Move authentication rule",
        "operationId": "moveAuthExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/afterId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Request layer with id not found"
          }
        }
      }
    },
    "/api/layers/decrypt/instructions": {
      "get": {
        "tags": [
          "DecryptionLayer"
        ],
        "description": "Read all decryption layer instructions",
        "operationId": "readDecryptionInstructions",
        "responses": {
          "200": {
            "description": "Read all decryption layer instructions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DecryptionInstruction"
                      }
                    },
                    "exclusions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DecryptionInstruction"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/decrypt/rules": {
      "post": {
        "tags": [
          "DecryptionLayer"
        ],
        "description": "Create decryption instruction",
        "operationId": "createDecryptionRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecryptionInstruction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created decryption instruction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecryptionInstruction"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/decrypt/exclusions": {
      "post": {
        "tags": [
          "DecryptionLayer"
        ],
        "description": "Create decryption instruction",
        "operationId": "createDecryptionExclusion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecryptionInstruction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created decryption instruction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecryptionInstruction"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/decrypt/rules/{id}": {
      "delete": {
        "tags": [
          "DecryptionLayer"
        ],
        "description": "Delete decryption instruction",
        "operationId": "removeDecryptionRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted decryption instruction"
          }
        }
      },
      "put": {
        "tags": [
          "DecryptionLayer"
        ],
        "description": "Update decryption instruction",
        "operationId": "updateDecryptionRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecryptionInstruction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated decryption instruction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecryptionInstruction"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DecryptionLayer"
        ],
        "description": "Enabled/disable decryption instruction",
        "operationId": "enableDecryptionRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/decryptionInstructionUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Toggled decryption instruction"
          },
          "404": {
            "description": "Instruction not found"
          }
        }
      },
      "post": {
        "tags": [
          "DecryptionLayer"
        ],
        "description": "Move decryption instruction",
        "operationId": "moveDecryptionRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/afterId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Moved decryption instruction"
          },
          "404": {
            "description": "Instruction not found"
          }
        }
      }
    },
    "/api/layers/decrypt/exclusions/{id}": {
      "delete": {
        "tags": [
          "DecryptionLayer"
        ],
        "description": "Delete decryption exclusion",
        "operationId": "removeDecryptionExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted decryption instruction"
          }
        }
      },
      "put": {
        "tags": [
          "DecryptionLayer"
        ],
        "description": "Update decryption exclusion",
        "operationId": "updateDecryptionExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecryptionInstruction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated decryption instruction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecryptionInstruction"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DecryptionLayer"
        ],
        "description": "Enabled/disable decryption exclusion",
        "operationId": "enableDecryptionExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/decryptionInstructionUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Toggled decryption instruction"
          },
          "404": {
            "description": "Instruction not found"
          }
        }
      }
    },
    "/api/layers/icap/instructions": {
      "get": {
        "tags": [
          "IcapLayer"
        ],
        "description": "Read all ICAP layer instructions",
        "operationId": "readIcapInstructions",
        "responses": {
          "200": {
            "description": "Read all ICAP layer instructions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IcapInstruction"
                      }
                    },
                    "exclusions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IcapInstruction"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/icap/rules": {
      "post": {
        "tags": [
          "IcapLayer"
        ],
        "description": "Create ICAP rule",
        "operationId": "createIcapRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IcapRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created ICAP rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IcapRule"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/icap/exclusions": {
      "post": {
        "tags": [
          "IcapLayer"
        ],
        "description": "Create ICAP exclusion",
        "operationId": "createIcapExclusion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IcapInstruction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created ICAP exclusion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IcapInstruction"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/icap/rules/{id}": {
      "delete": {
        "tags": [
          "IcapLayer"
        ],
        "description": "Delete ICAP rule",
        "operationId": "removeIcapRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted ICAP rule"
          }
        }
      },
      "put": {
        "tags": [
          "IcapLayer"
        ],
        "description": "Update ICAP rule",
        "operationId": "updateIcapRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IcapRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated ICAP rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IcapRule"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "IcapLayer"
        ],
        "description": "Enabled/disable ICAP rule",
        "operationId": "enableIcapRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/icapInstructionUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Toggled ICAP rule"
          },
          "404": {
            "description": "Rule not found"
          }
        }
      },
      "post": {
        "tags": [
          "IcapLayer"
        ],
        "description": "Move ICAP rule",
        "operationId": "moveIcapRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/afterId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Moved ICAP rule"
          },
          "404": {
            "description": "Rule not found"
          }
        }
      }
    },
    "/api/layers/icap/exclusions/{id}": {
      "delete": {
        "tags": [
          "IcapLayer"
        ],
        "description": "Delete ICAP exclusion",
        "operationId": "removeIcapExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted ICAP exclusion"
          }
        }
      },
      "put": {
        "tags": [
          "IcapLayer"
        ],
        "description": "Update ICAP exclusion",
        "operationId": "updateIcapExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IcapInstruction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated ICAP exclusion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IcapInstruction"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "IcapLayer"
        ],
        "description": "Enabled/disable ICAP exclusion",
        "operationId": "enableIcapExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/icapInstructionUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Toggled ICAP exclusion"
          },
          "404": {
            "description": "Exclusion not found"
          }
        }
      }
    },
    "/api/layers/routes/instructions": {
      "get": {
        "tags": [
          "RoutingLayer"
        ],
        "description": "Read all Routing layer instructions",
        "operationId": "readRoutingInstructions",
        "responses": {
          "200": {
            "description": "Read all Routing layer instructions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RoutingInstruction"
                      }
                    },
                    "exclusions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RoutingInstruction"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/routes/rules": {
      "post": {
        "tags": [
          "RoutingLayer"
        ],
        "description": "Create Routing instruction",
        "operationId": "createRoutingRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingInstruction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created Routing instruction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingInstruction"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/routes/exclusions": {
      "post": {
        "tags": [
          "RoutingLayer"
        ],
        "description": "Create Routing instruction",
        "operationId": "createRoutingExclusion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingInstruction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created Routing instruction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingInstruction"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/routes/rules/{id}": {
      "delete": {
        "tags": [
          "RoutingLayer"
        ],
        "description": "Delete routing instruction",
        "operationId": "removeRoutingRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted routing instruction"
          }
        }
      },
      "put": {
        "tags": [
          "RoutingLayer"
        ],
        "description": "Update Routing instruction",
        "operationId": "updateRoutingRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingInstruction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Routing instruction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingInstruction"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "RoutingLayer"
        ],
        "description": "Enabled/disable Routing instruction",
        "operationId": "enableRoutingRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/routingInstructionUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Toggled Routing instruction"
          },
          "404": {
            "description": "Instruction not found"
          }
        }
      },
      "post": {
        "tags": [
          "RoutingLayer"
        ],
        "description": "Move Routing instruction",
        "operationId": "moveRoutingRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/afterId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Moved Routing instruction"
          },
          "404": {
            "description": "Instruction not found"
          }
        }
      }
    },
    "/api/layers/routes/exclusions/{id}": {
      "delete": {
        "tags": [
          "RoutingLayer"
        ],
        "description": "Delete Routing exclusion",
        "operationId": "removeRoutingExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted Routing instruction"
          }
        }
      },
      "put": {
        "tags": [
          "RoutingLayer"
        ],
        "description": "Update Routing exclusion",
        "operationId": "updateRoutingExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingInstruction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Routing instruction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingInstruction"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "RoutingLayer"
        ],
        "description": "Enabled/disable Routing exclusion",
        "operationId": "enableRoutingExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/routingInstructionUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Toggled Routing instruction"
          },
          "404": {
            "description": "Instruction not found"
          }
        }
      }
    },
    "/api/layers/ips/exclusions": {
      "get": {
        "tags": [
          "IpsLayer"
        ],
        "description": "Read all IPS layer instructions",
        "operationId": "readIpsExclusions",
        "responses": {
          "200": {
            "description": "List all IPS layer instructions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IspInstruction"
                      }
                    },
                    "exclusions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IspInstruction"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "IpsLayer"
        ],
        "description": "Create IPS exclusion",
        "operationId": "createIpsExclusion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created IPS exclusion",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/ips/exclusions/{id}": {
      "delete": {
        "tags": [
          "IpsLayer"
        ],
        "description": "Delete IPS exclusion",
        "operationId": "removeIpsExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted Ips exclusion"
          }
        }
      },
      "put": {
        "tags": [
          "IpsLayer"
        ],
        "description": "Update IPS exclusion",
        "operationId": "updateIpsExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IspInstruction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated IPS exclusion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IspInstruction"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "IpsLayer"
        ],
        "description": "Enabled/disable IPS exclusion",
        "operationId": "enableIpsExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IspInstruction"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Toggled IPS exclusion"
          },
          "404": {
            "description": "Exclusion not found"
          }
        }
      }
    },
    "/api/layers/request": {
      "get": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Returns list of request layers",
        "operationId": "readLayers",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequestLayer"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Create request layer",
        "operationId": "createLayer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/requestLayerUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a request layer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestLayer"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/request/{id}": {
      "get": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Obtain information about request layer by id",
        "operationId": "readLayer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned request layer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestLayer"
                }
              }
            }
          },
          "404": {
            "description": "Could not find request layer with requested id"
          }
        }
      },
      "delete": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Delete request layer with id",
        "operationId": "removeLayer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Request layer with id not found"
          }
        }
      },
      "post": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Move request layer",
        "operationId": "moveLayer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/afterId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Request layer with id not found"
          }
        }
      },
      "patch": {
        "description": "Rename request layer",
        "tags": [
          "RequestLayers"
        ],
        "operationId": "renameLayer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/requestLayerUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Request layer with id not found"
          }
        }
      }
    },
    "/api/layers/request/{id}/instructions": {
      "get": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Read all instructions of request filter layer with {id}",
        "operationId": "getRequestInstructions",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RequestFilterRule"
                      }
                    },
                    "exclusions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RequestFilterExclusion"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/request/{id}/rules": {
      "post": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Create Request Filter rule",
        "operationId": "createRequestFilterRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFilterRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created new request filter rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestFilterRule"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/request/{layerId}/rules/{ruleId}": {
      "delete": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Delete request filter rule",
        "operationId": "removeRequestFilterRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/ruleIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted request filter rule"
          }
        }
      },
      "put": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Update request filter rule",
        "operationId": "updateRequestFilterRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/ruleIdParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFilterRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesfully updated request filter rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestFilterRule"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Toggle (enable/disable) request filter rule",
        "operationId": "toggleRequestFilterRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/ruleIdParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/toggleParameters"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Succesfully toggled request filter rule"
          },
          "404": {
            "description": "Rule not found"
          }
        }
      },
      "post": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Move request filter rule",
        "operationId": "moveRequestFilterRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/ruleIdParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/afterId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully moved request filter rule"
          },
          "404": {
            "description": "Rule not found"
          }
        }
      }
    },
    "/api/layers/request/{id}/exclusions": {
      "post": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Create Request Filter exclusion",
        "operationId": "createRequestFilterExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFilterExclusion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created new request filter exclusion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestFilterExclusion"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/request/{layerId}/exclusions/{exclusionId}": {
      "delete": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Delete request filter exclusion",
        "operationId": "removeRequestFilterExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/exclusionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted request filter exclusion"
          }
        }
      },
      "put": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Update request filter exclusion",
        "operationId": "updateRequestFilterExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/exclusionIdParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFilterExclusion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesfully updated request filter exclusion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestFilterExclusion"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Toggle (enable/disable) request filter exclusion",
        "operationId": "toggleRequestFilterExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/exclusionIdParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/toggleParameters"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Succesfully toggled request filter exclusion"
          },
          "404": {
            "description": "Exclusion not found"
          }
        }
      },
      "post": {
        "tags": [
          "RequestLayers"
        ],
        "description": "Move request filter exclusion",
        "operationId": "moveRequestFilterExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/exclusionIdParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/afterId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully moved request filter exclusion"
          },
          "404": {
            "description": "Exclusion not found"
          }
        }
      }
    },
    "/api/layers/response": {
      "get": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Returns list of response layers",
        "operationId": "readLayers",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseLayer"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Create response layer",
        "operationId": "createLayer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/requestLayerUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created response layer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseLayer"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/response/{id}": {
      "get": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Obtain information about response layer by id",
        "operationId": "readLayer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned response layer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseLayer"
                }
              }
            }
          },
          "404": {
            "description": "Could not find response layer with responseed id"
          }
        }
      },
      "delete": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Delete response layer with id",
        "operationId": "removeLayer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Response layer with id not found"
          }
        }
      },
      "post": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Move response layer",
        "operationId": "moveLayer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/afterId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Response layer with id not found"
          }
        }
      },
      "patch": {
        "description": "Rename response layer",
        "tags": [
          "ResponseLayers"
        ],
        "operationId": "renameLayer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/requestLayerUpdateParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Response layer with id not found"
          }
        }
      }
    },
    "/api/layers/response/{id}/instructions": {
      "get": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Read all instructions of response filter layer with {id}",
        "operationId": "getResponseInstructions",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResponseFilterRule"
                      }
                    },
                    "exclusions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResponseFilterExclusion"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/response/{id}/rules": {
      "post": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Create Response Filter rule",
        "operationId": "createResponseFilterRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResponseFilterRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created new response filter rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFilterRule"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/response/{layerId}/rules/{ruleId}": {
      "delete": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Delete response filter rule",
        "operationId": "removeResponseFilterRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/ruleIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted response filter rule"
          }
        }
      },
      "put": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Update response filter rule",
        "operationId": "updateResponseFilterRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/ruleIdParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResponseFilterRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesfully updated response filter rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFilterRule"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Toggle (enable/disable) response filter rule",
        "operationId": "toggleResponseFilterRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/ruleIdParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/toggleParameters"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Succesfully toggled response filter rule"
          },
          "404": {
            "description": "Rule not found"
          }
        }
      },
      "post": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Move response filter rule",
        "operationId": "moveResponseFilterRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/ruleIdParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/afterId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully moved response filter rule"
          },
          "404": {
            "description": "Rule not found"
          }
        }
      }
    },
    "/api/layers/response/{id}/exclusions": {
      "post": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Create Response Filter exclusion",
        "operationId": "createResponseFilterExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResponseFilterExclusion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created new response filter exclusion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFilterExclusion"
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/response/{layerId}/exclusions/{exclusionId}": {
      "delete": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Delete response filter exclusion",
        "operationId": "removeResponseFilterExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/exclusionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted response filter exclusion"
          }
        }
      },
      "put": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Update response filter exclusion",
        "operationId": "updateResponseFilterExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/exclusionIdParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResponseFilterExclusion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesfully updated response filter exclusion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFilterExclusion"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Toggle (enable/disable) response filter exclusion",
        "operationId": "toggleResponseFilterExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/exclusionIdParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/toggleParameters"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Succesfully toggled response filter exclusion"
          },
          "404": {
            "description": "Exclusion not found"
          }
        }
      },
      "post": {
        "tags": [
          "ResponseLayers"
        ],
        "description": "Move response filter exclusion",
        "operationId": "moveResponseFilterExclusion",
        "parameters": [
          {
            "$ref": "#/components/parameters/layerIdParameter"
          },
          {
            "$ref": "#/components/parameters/exclusionIdParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/afterId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully moved response filter exclusion"
          },
          "404": {
            "description": "Exclusion not found"
          }
        }
      }
    },
    "/api/policy/item/condition-source": {
      "get": {
        "tags": [
          "PolicyItemConditionSource"
        ],
        "description": "Get list of condition source",
        "operationId": "readConditionSource",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemConditionSource"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemConditionSource"
        ],
        "description": "Add new condition source",
        "operationId": "createConditionSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemConditionSource"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemConditionSource"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/condition-source/{id}": {
      "get": {
        "tags": [
          "PolicyItemConditionSource"
        ],
        "description": "Get condition source",
        "operationId": "readConditionSourceItem",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemConditionSource"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemConditionSource"
        ],
        "description": "Update condition source",
        "operationId": "updateConditionSource",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemConditionSource"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemConditionSource"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemConditionSource"
        ],
        "description": "Remove condition source",
        "operationId": "removeConditionSource",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/policy/item/condition-destination": {
      "get": {
        "tags": [
          "PolicyItemConditionDest"
        ],
        "description": "Get list of condition destination",
        "operationId": "readConditionDestination",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemConditionDest"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemConditionDest"
        ],
        "description": "Add new condition destination",
        "operationId": "createConditionDestination",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemConditionDest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemConditionDest"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/condition-destination/{id}": {
      "get": {
        "tags": [
          "PolicyItemConditionDest"
        ],
        "description": "Get condition destination",
        "operationId": "readConditionDestinationItem",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemConditionDest"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemConditionDest"
        ],
        "description": "Update condition destination",
        "operationId": "updateConditionDestination",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemConditionDest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemConditionDest"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemConditionDest"
        ],
        "description": "Remove condition destination",
        "operationId": "removeConditionDestination",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/policy/item/ip": {
      "get": {
        "tags": [
          "PolicyItemIpRange"
        ],
        "description": "Get array of Ip ranges",
        "operationId": "readIpRanges",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemIpRange"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemIpRange"
        ],
        "description": "Create ip range",
        "operationId": "createIpRange",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemIpRange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemIpRange"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/ip/{id}": {
      "get": {
        "tags": [
          "PolicyItemIpRange"
        ],
        "description": "Get ip range",
        "operationId": "readIpRange",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemIpRange"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemIpRange"
        ],
        "description": "Update ip range",
        "operationId": "updateIpRange",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemIpRange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemIpRange"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemIpRange"
        ],
        "description": "Remove IP range",
        "operationId": "removeIpRange",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted item"
          }
        }
      }
    },
    "/api/policy/item/traffic-limit": {
      "get": {
        "tags": [
          "PolicyItemTrafficLimit"
        ],
        "description": "Get list of traffic limits",
        "operationId": "readTrafficLimits",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrafficLimit"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemTrafficLimit"
        ],
        "description": "Create traffic limit",
        "operationId": "createTrafficLimit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrafficLimit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrafficLimit"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/traffic-limit/{id}": {
      "get": {
        "tags": [
          "PolicyItemTrafficLimit"
        ],
        "description": "Get traffic limit",
        "operationId": "readTrafficLimit",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrafficLimit"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemTrafficLimit"
        ],
        "description": "Update traffic limit",
        "operationId": "updateTrafficLimit",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrafficLimit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrafficLimit"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemTrafficLimit"
        ],
        "description": "Delete traffic limit from a policy",
        "operationId": "removeTrafficLimit",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted item"
          }
        }
      }
    },
    "/api/policy/item/proxy-server": {
      "get": {
        "tags": [
          "PolicyItemProxyServer"
        ],
        "description": "Get list of proxy servers",
        "operationId": "readProxyServers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProxyServer"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemProxyServer"
        ],
        "description": "Add new proxy server",
        "operationId": "createProxyServer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxyServer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyServer"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/proxy-server/{id}": {
      "get": {
        "tags": [
          "PolicyItemProxyServer"
        ],
        "description": "Get proxy server",
        "operationId": "readProxyServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyServer"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemProxyServer"
        ],
        "description": "Update proxy server",
        "operationId": "updateProxyServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxyServer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyServer"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemProxyServer"
        ],
        "description": "Remove proxy server",
        "operationId": "removeProxyServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted item"
          }
        }
      }
    },
    "/api/policy/item/icap-server": {
      "get": {
        "tags": [
          "PolicyItemIcapServer"
        ],
        "description": "Get list of icaps servers",
        "operationId": "readIcapServers",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IcapServer"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemIcapServer"
        ],
        "description": "Add new icap server",
        "operationId": "createIcapServer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IcapServer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IcapServer"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/icap-server/{id}": {
      "get": {
        "tags": [
          "PolicyItemIcapServer"
        ],
        "description": "Get icap server",
        "operationId": "readIcapServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IcapServer"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemIcapServer"
        ],
        "description": "Update icap server",
        "operationId": "updateIcapServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IcapServer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IcapServer"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemIcapServer"
        ],
        "description": "Delete icap server",
        "operationId": "removeIcapServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted item"
          }
        }
      }
    },
    "/api/policy/item/time": {
      "get": {
        "tags": [
          "PolicyItemSchedule"
        ],
        "description": "Get list of schedules",
        "operationId": "readSchedules",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Schedule"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemSchedule"
        ],
        "description": "Create new schedule",
        "operationId": "createSchedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/time/{id}": {
      "get": {
        "tags": [
          "PolicyItemSchedule"
        ],
        "description": "Get schedule",
        "operationId": "readSchedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemSchedule"
        ],
        "description": "Update schedule",
        "operationId": "updateSchedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemSchedule"
        ],
        "description": "Delete schedule",
        "operationId": "removeSchedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted item"
          }
        }
      }
    },
    "/api/policy/item/keyword": {
      "get": {
        "tags": [
          "PolicyItemKeyword"
        ],
        "description": "Get list of keywords",
        "operationId": "readKeywords",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemKeyword"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemKeyword"
        ],
        "description": "Add new keyword",
        "operationId": "createKeyword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemKeyword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemKeyword"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/keyword/{id}": {
      "get": {
        "tags": [
          "PolicyItemKeyword"
        ],
        "description": "Get keyword",
        "operationId": "readKeyword",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemKeyword"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemKeyword"
        ],
        "description": "Update keyword",
        "operationId": "updateKeyword",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemKeyword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemKeyword"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemKeyword"
        ],
        "description": "Delete keyword",
        "operationId": "removeKeyword",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/policy/item/user": {
      "get": {
        "tags": [
          "PolicyItemUser"
        ],
        "description": "Get list of users",
        "operationId": "readUsers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemUser"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemUser"
        ],
        "description": "Add new user",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemUser"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/user/{id}": {
      "get": {
        "tags": [
          "PolicyItemUser"
        ],
        "description": "Get user",
        "operationId": "readUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemUser"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemUser"
        ],
        "description": "Update user",
        "operationId": "updateUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemUser"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemUser"
        ],
        "description": "Remove user",
        "operationId": "removeUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/policy/item/header": {
      "get": {
        "tags": [
          "PolicyItemHeader"
        ],
        "description": "Get list of headers",
        "operationId": "readHeaders",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemHeader"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemHeader"
        ],
        "description": "Add new header",
        "operationId": "createHeader",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemHeader"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemHeader"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/header/{id}": {
      "get": {
        "tags": [
          "PolicyItemHeader"
        ],
        "description": "Get header",
        "operationId": "readHeader",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemHeader"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemHeader"
        ],
        "description": "Update header",
        "operationId": "updateHeader",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemHeader"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemHeader"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemHeader"
        ],
        "description": "Remove header",
        "operationId": "removeHeader",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/policy/item/header-adder": {
      "get": {
        "tags": [
          "PolicyItemHeaderAdder"
        ],
        "description": "Get list of  header adding conditions",
        "operationId": "readHeaderAdders",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemHeaderAdder"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemHeaderAdder"
        ],
        "description": "Add new header adding condition",
        "operationId": "createHeaderAdder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemHeaderAdder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemHeaderAdder"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/header-adder/{id}": {
      "get": {
        "tags": [
          "PolicyItemHeaderAdder"
        ],
        "description": "Get header adding condition",
        "operationId": "readHeaderAdder",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemHeaderAdder"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemHeaderAdder"
        ],
        "description": "Update header adding condition",
        "operationId": "updateHeaderAdder",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemHeaderAdder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemHeaderAdder"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemHeaderAdder"
        ],
        "description": "Remove header adding condition",
        "operationId": "removeHeaderAdder",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/policy/item/header-modifier": {
      "get": {
        "tags": [
          "PolicyItemHeaderModifier"
        ],
        "description": "Get list of header update conditions",
        "operationId": "readHeaderModifiers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemHeaderModifier"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemHeaderModifier"
        ],
        "description": "Add new header update condition",
        "operationId": "createHeaderModifier",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemHeaderModifier"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemHeaderModifier"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/header-modifier/{id}": {
      "get": {
        "tags": [
          "PolicyItemHeaderModifier"
        ],
        "description": "Get header update condition",
        "operationId": "readHeaderModifier",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemHeaderModifier"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemHeaderModifier"
        ],
        "description": "Update header update condition",
        "operationId": "updateHeaderModifier",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemHeaderModifier"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemHeaderModifier"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemHeaderModifier"
        ],
        "description": "Remove header update condition",
        "operationId": "removeHeaderModifier",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/policy/item/header-deleter": {
      "get": {
        "tags": [
          "PolicyItemHeaderDeleter"
        ],
        "description": "Get list of header delete conditions",
        "operationId": "readHeaderDeleters",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemHeaderDeleter"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemHeaderDeleter"
        ],
        "description": "Add new header delete conditions",
        "operationId": "createHeaderDeleter",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemHeaderDeleter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemHeaderDeleter"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/header-deleter/{id}": {
      "get": {
        "tags": [
          "PolicyItemHeaderDeleter"
        ],
        "description": "Get header delete condition",
        "operationId": "readHeaderDeleter",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemHeaderDeleter"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemHeaderDeleter"
        ],
        "description": "Update header delete condition",
        "operationId": "updateHeaderDeleter",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemHeaderDeleter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemHeaderDeleter"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemHeaderDeleter"
        ],
        "description": "Remove header delete condition",
        "operationId": "removeHeaderDeleter",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/policy/item/email": {
      "get": {
        "tags": [
          "PolicyItemEmail"
        ],
        "description": "Get list of email adresses",
        "operationId": "readEmails",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemEmail"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemEmail"
        ],
        "description": "Add new email address",
        "operationId": "createEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemEmail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemEmail"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/email/{id}": {
      "get": {
        "tags": [
          "PolicyItemEmail"
        ],
        "description": "Get email address",
        "operationId": "readEmail",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemEmail"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemEmail"
        ],
        "description": "Update email address",
        "operationId": "updateEmail",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemEmail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemEmail"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemEmail"
        ],
        "description": "Remove email address",
        "operationId": "removeEmail",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/policy/item/url": {
      "get": {
        "tags": [
          "PolicyItemUrl"
        ],
        "description": "Get list of URLs",
        "operationId": "readUrls",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemUrl"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemUrl"
        ],
        "description": "Add new URL",
        "operationId": "createUrl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemUrl"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemUrl"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/url/{id}": {
      "get": {
        "tags": [
          "PolicyItemUrl"
        ],
        "description": "Get URL",
        "operationId": "readUrl",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemUrl"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemUrl"
        ],
        "description": "Update URL",
        "operationId": "updateUrl",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemUrl"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemUrl"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemUrl"
        ],
        "description": "Remove URL",
        "operationId": "removeUrl",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/policy/item/template": {
      "get": {
        "tags": [
          "PolicyItemTemplate"
        ],
        "description": "Get list of templates",
        "operationId": "readTemplates",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemTemplate"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemTemplate"
        ],
        "description": "Add new template",
        "operationId": "createTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemTemplate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemTemplate"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/template/{id}": {
      "get": {
        "tags": [
          "PolicyItemTemplate"
        ],
        "description": "Get template",
        "operationId": "readTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemTemplate"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemTemplate"
        ],
        "description": "Update template",
        "operationId": "updateTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemTemplate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemTemplate"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemTemplate"
        ],
        "description": "Remove template",
        "operationId": "removeTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/policy/item/file": {
      "get": {
        "tags": [
          "PolicyItemFile"
        ],
        "description": "Get list of file list",
        "operationId": "readFilesLists",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemFile"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PolicyItemFile"
        ],
        "description": "Add new file list",
        "operationId": "createFilesList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemFile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemFile"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/file/{id}": {
      "get": {
        "tags": [
          "PolicyItemFile"
        ],
        "description": "Get file list",
        "operationId": "readFilesList",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemFile"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyItemFile"
        ],
        "description": "Update file list",
        "operationId": "updateFilesList",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyItemFile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyItemFile"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyItemFile"
        ],
        "description": "Remove file list",
        "operationId": "removeFilesList",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        }
      }
    },
    "/policy/item/find/url": {
      "post": {
        "tags": [
          "PolicyItemUrl"
        ],
        "description": "Get list of URLs",
        "operationId": "findUrlUnits",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyItemUrl"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/file-formats": {
      "get": {
        "tags": [
          "FileFormats"
        ],
        "description": "Retrieve file formats dictionary",
        "operationId": "getFileFormats",
        "responses": {
          "200": {
            "description": "File formats tree",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/markers": {
      "post": {
        "tags": [
          "Markers"
        ],
        "description": "Create element markers dictionary",
        "operationId": "createMarker",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLogMarker"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddLogMarker"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/markers/all": {
      "get": {
        "tags": [
          "Markers"
        ],
        "description": "Retrieve filter markers dictionary",
        "operationId": "allMarkers",
        "responses": {
          "200": {
            "description": "Markers list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddLogMarker"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/markers/{id}": {
      "delete": {
        "tags": [
          "Markers"
        ],
        "description": "Remove marker by id",
        "operationId": "deleteMarker",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully delete marker"
          }
        }
      },
      "put": {
        "tags": [
          "Markers"
        ],
        "description": "Update element markers dictionary",
        "operationId": "updateMarker",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLogMarker"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddLogMarker"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Markers"
        ],
        "description": "Get marker by id",
        "operationId": "getMarker",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully marker",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddLogMarker"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/markers/{id}/import": {
      "post": {
        "tags": [
          "Markers"
        ],
        "description": "Import marker",
        "operationId": "importMarker",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file",
                  "replace"
                ],
                "properties": {
                  "replace": {
                    "type": "boolean"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully import and update marker",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddLogMarker"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/markers/{id}/export": {
      "get": {
        "tags": [
          "Markers"
        ],
        "description": "Export marker",
        "operationId": "exportMarker",
        "parameters": [
          {
            "$ref": "#/components/parameters/idParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Export all policy file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/markers/import": {
      "post": {
        "tags": [
          "Markers"
        ],
        "description": "Import new marker",
        "operationId": "importNewMarker",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file",
                  "replace"
                ],
                "properties": {
                  "replace": {
                    "type": "boolean"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully import and create marker",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddLogMarker"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/check/regexp": {
      "post": {
        "tags": [
          "Checking"
        ],
        "description": "Check url list by regular expression",
        "operationId": "check",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckRegExp"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckResultDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/check/find": {
      "post": {
        "tags": [
          "Checking"
        ],
        "description": "Find policy info by url",
        "operationId": "find",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UrlInfoDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/check/find/{id}": {
      "get": {
        "tags": [
          "Checking"
        ],
        "description": "Find instructions by url list id",
        "operationId": "findInstructions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstructionInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/accept": {
      "post": {
        "tags": [
          "Policy"
        ],
        "description": "Apply policy",
        "operationId": "apply",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Applied the policy"
          }
        }
      }
    },
    "/api/policy/last-accept-info": {
      "get": {
        "tags": [
          "Policy"
        ],
        "description": "Get last accept information",
        "operationId": "lastAcceptInfo",
        "responses": {
          "200": {
            "description": "Applied the policy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string",
                      "format": "date"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/export": {
      "get": {
        "tags": [
          "PolicyExport"
        ],
        "description": "Export policy",
        "operationId": "exportPolicy",
        "responses": {
          "200": {
            "description": "Export all policy file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/{itemType}/export": {
      "get": {
        "tags": [
          "PolicyExport"
        ],
        "description": "Export item",
        "operationId": "exportItem",
        "parameters": [
          {
            "name": "itemType",
            "in": "path",
            "description": "Export policy item",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ItemExportableTypes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/item/{itemType}/{id}/export": {
      "get": {
        "tags": [
          "PolicyExport"
        ],
        "description": "Export list of items",
        "operationId": "exportItemList",
        "parameters": [
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ItemListExportableTypes"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/import": {
      "post": {
        "tags": [
          "PolicyImport"
        ],
        "description": "Import policy",
        "operationId": "importPolicy",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import all policy file"
          }
        }
      }
    },
    "/api/policy/item/{itemType}/import": {
      "post": {
        "tags": [
          "PolicyImport"
        ],
        "description": "Import item",
        "operationId": "importItem",
        "parameters": [
          {
            "in": "path",
            "name": "itemType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ItemExportableTypes"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file",
                  "replace"
                ],
                "properties": {
                  "replace": {
                    "type": "boolean"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import item list policy file"
          }
        }
      }
    },
    "/api/policy/item/{itemType}/{id}/import": {
      "post": {
        "tags": [
          "PolicyImport"
        ],
        "description": "Import list of items",
        "operationId": "importItemList",
        "parameters": [
          {
            "in": "path",
            "name": "itemType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ItemListExportableTypes"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file",
                  "replace"
                ],
                "properties": {
                  "replace": {
                    "type": "boolean"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import item list policy file"
          }
        }
      }
    },
    "/api/policy/item/{itemType}": {
      "get": {
        "tags": [
          "PolicyItems"
        ],
        "description": "Get list of policy items",
        "operationId": "load",
        "parameters": [
          {
            "in": "path",
            "name": "itemType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ItemListPolicyItemsTypes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Load Policy items (object and other lists)"
          }
        }
      }
    },
    "/api/policy/categories/servers": {
      "get": {
        "tags": [
          "UrlCategory"
        ],
        "description": "Retrieve file formats dictionary",
        "operationId": "getServers",
        "responses": {
          "200": {
            "description": "servers with url checker",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/categories/check": {
      "post": {
        "tags": [
          "UrlCategory"
        ],
        "description": "List of categories for resources grouped by categorizer",
        "operationId": "check",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/categories/send": {
      "post": {
        "tags": [
          "UrlCategory"
        ],
        "description": "Send new category for url",
        "operationId": "send",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnyObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/categories/export": {
      "get": {
        "tags": [
          "UrlCategory"
        ],
        "description": "Export categories",
        "operationId": "exportAll",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/policy/categories/import": {
      "post": {
        "tags": [
          "UrlCategory"
        ],
        "description": "Import categories",
        "operationId": "importAll",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import all policy file"
          }
        }
      }
    },
    "/dossier/tree": {
      "get": {
        "tags": [
          "Dossier"
        ],
        "description": "List of dossier groups",
        "operationId": "tree",
        "parameters": [
          {
            "in": "query",
            "name": "node",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "group",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of dossier groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tree"
                }
              }
            }
          }
        }
      }
    },
    "/dossier/sections/{id}": {
      "delete": {
        "tags": [
          "Dossier"
        ],
        "description": "Delete dossier section",
        "operationId": "sectionDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/dossier/sections/{id}/groups": {
      "get": {
        "tags": [
          "Dossier"
        ],
        "description": "List of dossier section groups",
        "operationId": "section",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of dossier section groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          }
        }
      }
    },
    "/dossier/groups": {
      "post": {
        "tags": [
          "Dossier"
        ],
        "description": "Create group",
        "operationId": "groupCreate",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSaveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCreateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dossier/groups/{id}": {
      "get": {
        "tags": [
          "Dossier"
        ],
        "description": "Dossier group",
        "operationId": "group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dossier group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Dossier"
        ],
        "description": "update dossier group",
        "operationId": "groupUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSaveRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Dossier"
        ],
        "description": "Delete dossier group",
        "operationId": "groupDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/dossier/groups/{id}/persons": {
      "get": {
        "tags": [
          "Dossier"
        ],
        "description": "List of dossier persons",
        "operationId": "groupPersons",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of dossier section groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPersonsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Dossier"
        ],
        "description": "Update persons",
        "operationId": "groupPersonsUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupPersonsUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/dossier/groups/{id}/deleteInfo": {
      "get": {
        "tags": [
          "Dossier"
        ],
        "description": "Get delete info",
        "operationId": "groupDeleteInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "persons"
                  ],
                  "properties": {
                    "persons": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dossier/search": {
      "get": {
        "tags": [
          "Dossier"
        ],
        "description": "Dossier search",
        "operationId": "search",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "path",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "deletableOnly",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "editableGroupOnly",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "orgGroupOnly",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "department",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "groupsLimit",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "personsLimit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search persons and groups in dossier by query. Return persons without addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dossier/sync": {
      "post": {
        "tags": [
          "Dossier"
        ],
        "description": "Dossier sync",
        "operationId": "sync",
        "responses": {
          "200": {
            "description": "Dossier syncronization"
          }
        }
      }
    },
    "/dossier/persons": {
      "post": {
        "tags": [
          "Dossier"
        ],
        "description": "Create person",
        "operationId": "personCreate",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCreateRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/dossier/persons/search": {
      "get": {
        "tags": [
          "Dossier"
        ],
        "description": "Search for persons",
        "operationId": "searchPersons",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "withGroups",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "searchAddresses",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "searchTitle",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "addresses",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search persons in dossier by query"
          }
        }
      }
    },
    "/dossier/persons/{id}": {
      "delete": {
        "tags": [
          "Dossier"
        ],
        "description": "Delete person",
        "operationId": "personDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/dossier/persons/{id}/brief": {
      "get": {
        "tags": [
          "Dossier"
        ],
        "description": "Person brief",
        "operationId": "brief",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Person brief",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonBrief"
                }
              }
            }
          }
        }
      }
    },
    "/dossier/persons/{id}/extra": {
      "get": {
        "tags": [
          "Dossier"
        ],
        "description": "Person extra",
        "operationId": "extra",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Person extra",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonExtra"
                }
              }
            }
          }
        }
      }
    },
    "/dossier/persons/{id}/attributes": {
      "patch": {
        "tags": [
          "Dossier"
        ],
        "description": "Patch person attributes",
        "operationId": "attributes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonPatchAttribute"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/dossier/persons/{id}/groups": {
      "patch": {
        "tags": [
          "Dossier"
        ],
        "description": "Patch person groups",
        "operationId": "patchGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonPatchGroups"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/dossier/persons/{id}/department": {
      "put": {
        "tags": [
          "Dossier"
        ],
        "description": "Set person department",
        "operationId": "setDepartment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "departmentId"
                ],
                "properties": {
                  "departmentId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/dossier/persons/{id}/images/upload": {
      "post": {
        "tags": [
          "Dossier"
        ],
        "description": "Upload person image",
        "operationId": "uploadImage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preview",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "csrfToken",
                  "picture"
                ],
                "properties": {
                  "csrfToken": {
                    "type": "string"
                  },
                  "picture": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/dossier/persons/{id}/notes": {
      "post": {
        "tags": [
          "Dossier"
        ],
        "description": "Create note",
        "operationId": "noteCreate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "csrfToken",
                  "comment"
                ],
                "properties": {
                  "csrfToken": {
                    "type": "string"
                  },
                  "comment": {
                    "type": "string"
                  },
                  "attachment": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/dossier/persons/{id}/notes/{noteId}": {
      "delete": {
        "tags": [
          "Dossier"
        ],
        "description": "Delete note",
        "operationId": "noteDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/dossier/persons/merge": {
      "post": {
        "tags": [
          "Dossier"
        ],
        "description": "Merge persons",
        "operationId": "personsMerge",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "destination",
                  "source"
                ],
                "properties": {
                  "destination": {
                    "type": "string"
                  },
                  "source": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/dossier/groups/search": {
      "get": {
        "tags": [
          "Dossier"
        ],
        "description": "Search for groups",
        "operationId": "searchGroups",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "path",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search groups in dossier by query."
          }
        }
      }
    },
    "/api/stat/reports": {
      "get": {
        "tags": [
          "StatReport"
        ],
        "description": "Get all reports",
        "operationId": "getAll",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "templates": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ReportFolder"
                      }
                    },
                    "recommended": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Report"
                      }
                    },
                    "saved": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "$ref": "#/components/schemas/ReportFolder"
                          },
                          {
                            "$ref": "#/components/schemas/Report"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stat/reports/export": {
      "post": {
        "tags": [
          "StatReport"
        ],
        "description": "Export report",
        "operationId": "exportReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "url",
                  "name"
                ],
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "filters": {
                    "type": "object"
                  },
                  "period": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/stat/reports/saved": {
      "get": {
        "tags": [
          "StatReport"
        ],
        "description": "Get all saved reports",
        "operationId": "getAllSaved",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/ReportFolder"
                      },
                      {
                        "$ref": "#/components/schemas/Report"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "StatReport"
        ],
        "operationId": "createSavedReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          }
        }
      }
    },
    "/api/stat/reports/saved/params/{id}": {
      "patch": {
        "tags": [
          "StatReport"
        ],
        "description": "Refresh parameters of saved reports",
        "operationId": "updateSavedReportParams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          }
        }
      }
    },
    "/api/stat/folders": {
      "post": {
        "tags": [
          "StatReport"
        ],
        "description": "Create new folder share for saved reports",
        "operationId": "createSavedFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "comment": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportFolder"
                }
              }
            }
          }
        }
      }
    },
    "/api/stat/folders/{id}": {
      "get": {
        "tags": [
          "StatReport"
        ],
        "description": "Get folder for saved reports",
        "operationId": "getSavedFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportFolder"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "StatReport"
        ],
        "description": "Refresh a folder for saved reports",
        "operationId": "updateSavedFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportFolder"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StatReport"
        ],
        "description": "Delete a folder for saved reports",
        "operationId": "deleteSavedFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted item"
          }
        }
      }
    },
    "/api/stat/folders/share/{id}": {
      "post": {
        "tags": [
          "StatReport"
        ],
        "description": "Share folder for saved reports",
        "operationId": "shareSavedReportFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "users"
                ],
                "properties": {
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportFolder"
                }
              }
            }
          }
        }
      }
    },
    "/api/stat/reports/saved/{id}": {
      "get": {
        "tags": [
          "StatReport"
        ],
        "description": "Get saved report",
        "operationId": "getSavedReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "StatReport"
        ],
        "description": "Update a saved report",
        "operationId": "updateSavedReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "parent": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "required": [
                          "id"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "comment": {
                    "type": "string"
                  },
                  "params": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StatReport"
        ],
        "description": "Remove a saved report",
        "operationId": "deleteSavedReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted item"
          }
        }
      }
    },
    "/api/stat/reports/saved/share/{id}": {
      "post": {
        "tags": [
          "StatReport"
        ],
        "description": "Share saved report",
        "operationId": "shareSavedReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "users"
                ],
                "properties": {
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          }
        }
      }
    },
    "/api/stat/share/users": {
      "get": {
        "tags": [
          "StatReport"
        ],
        "description": "Get list of users for share",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stat/grafana-items": {
      "get": {
        "tags": [
          "StatReport"
        ],
        "description": "Get grafana items for hosts",
        "operationId": "getMonitoringItems",
        "parameters": [
          {
            "name": "hosts",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/config/groups": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Get list of system preferences groups",
        "operationId": "getPreferencesGroups",
        "parameters": [
          {
            "name": "node",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of system preferences groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingsGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/config/values": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Get list of system preferences inside one group",
        "operationId": "getPreferencesValues",
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "common",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of system preferences inside one group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingsSectionItem"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "System"
        ],
        "description": "Update preferences values inside group",
        "operationId": "setPreferencesValues",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return nothing if all good",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/config/search": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Search for settings fields by phrase",
        "operationId": "searchSettingsItem",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of system settings by query phrase",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingsSearchItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/config/status": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Get system status",
        "operationId": "getSystemStatus",
        "parameters": [
          {
            "name": "_dc",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of system preferences groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemGroupsInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/config/apply": {
      "post": {
        "tags": [
          "System"
        ],
        "description": "Apply system status",
        "operationId": "applySystemStatus",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Apply system preferences",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "dirty",
                    "lastAccepted"
                  ],
                  "properties": {
                    "dirty": {
                      "type": "boolean"
                    },
                    "lastAccepted": {
                      "type": "object",
                      "required": [
                        "user",
                        "message",
                        "date"
                      ],
                      "properties": {
                        "user": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        },
                        "date": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/hosts": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Get list of nodes",
        "operationId": "getHosts",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hosts"
                }
              }
            }
          }
        }
      }
    },
    "/api/filter-hosts": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Get nodes with skvt-wizor",
        "operationId": "getFilterHosts",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hosts"
                }
              }
            }
          }
        }
      }
    },
    "/api/ips-hosts": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Get nodes with IPS",
        "operationId": "getIpsHosts",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hosts"
                }
              }
            }
          }
        }
      }
    },
    "/api/config/nodes/full/subclusters": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Get list of Subclusters",
        "operationId": "getSubclusters",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subclusters"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/config/roles": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Get all possible roles of subclusters",
        "operationId": "getSubclustersRoles",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubclusterRole"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "System"
        ],
        "description": "Update roles of subcluster",
        "operationId": "setSubclustersRoles",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return nothing if all good",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "required": [
                    "success",
                    "nodeUpdateResults"
                  ],
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "nodeUpdateResults": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NodeRoleUpdateResult"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/monitor/logs": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Get rows of logs",
        "operationId": "getLogs",
        "parameters": [
          {
            "name": "nodeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rowsAmount",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "withMarkers",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Logs"
                }
              }
            }
          }
        }
      }
    },
    "/api/monitor/logs/nodes": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Get nodes with services (for logs)",
        "operationId": "getLogsNodes",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogNodesWithServices"
                }
              }
            }
          }
        }
      }
    },
    "/api/monitor/conntrack": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Get rows of connections",
        "operationId": "getConnections",
        "parameters": [
          {
            "name": "nodeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conntrack"
                }
              }
            }
          }
        }
      }
    },
    "/api/monitor/conntrack-reset": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Get rows of connections",
        "operationId": "resetConnections",
        "parameters": [
          {
            "name": "nodeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/monitor/check/ldap": {
      "post": {
        "tags": [
          "System"
        ],
        "description": "Check LDAP Connection",
        "operationId": "checkLDAPConnection",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return nothing if all good",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "required": [
                    "success",
                    "message"
                  ],
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/monitor/check/abook": {
      "post": {
        "tags": [
          "System"
        ],
        "description": "Check ABOOK Connection",
        "operationId": "checkABookConnection",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "host",
                  "port"
                ],
                "properties": {
                  "host": {
                    "type": "string"
                  },
                  "port": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return connection result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "success",
                    "message"
                  ],
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/monitor/scripts": {
      "get": {
        "tags": [
          "System"
        ],
        "description": "Get list of available scripts of node",
        "operationId": "getNodeScripts",
        "parameters": [
          {
            "name": "nodeIdFilter",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of available scripts of node",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "nodes"
                  ],
                  "properties": {
                    "nodes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NodeScriptsList"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/monitor/scripts/run": {
      "post": {
        "tags": [
          "System"
        ],
        "description": "Run script on node",
        "operationId": "runScriptOnNode",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return nothing if all good",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/monitor/logs/ips": {
      "post": {
        "tags": [
          "IPSystem"
        ],
        "description": "Get logs of IPS",
        "operationId": "getLogs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nodeId": {
                    "type": "string"
                  },
                  "rowsAmount": {
                    "type": "string"
                  },
                  "severity": {
                    "type": "string"
                  },
                  "category": {
                    "type": "string"
                  },
                  "action": {
                    "type": "string"
                  },
                  "src_ip": {
                    "type": "string"
                  },
                  "dst_ip": {
                    "type": "string"
                  },
                  "dst_port": {
                    "type": "number"
                  },
                  "proto": {
                    "type": "string"
                  },
                  "signature_id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/ips/classtypes": {
      "get": {
        "tags": [
          "IPSystem"
        ],
        "description": "Retrieve IPS Categories",
        "operationId": "getIpsCategories",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/layers/ips/classtypes/{id}": {
      "patch": {
        "tags": [
          "IPSystem"
        ],
        "description": "Enabled/disable IPS Category",
        "operationId": "toggleCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "205": {
            "description": "Toggled IPS Category"
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/api/layers/ips/rules/{category}": {
      "get": {
        "tags": [
          "IPSystem"
        ],
        "description": "Retrieve IPS rules bay Category",
        "operationId": "getIpsRulesByCategory",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "I18nMessagesResponse": {
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "AuthStatusProductName": {
        "type": "string",
        "enum": [
          "webProxy",
          "NGFW"
        ]
      },
      "LicenseInfoModule": {
        "type": "object",
        "required": [
          "name",
          "disabled"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          }
        }
      },
      "LicenseInfo": {
        "type": "object",
        "properties": {
          "edit": {
            "type": "boolean"
          },
          "read": {
            "type": "boolean"
          },
          "customer": {
            "type": "string"
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "genDate": {
            "type": "string"
          },
          "installationId": {
            "type": "string"
          },
          "licenseId": {
            "type": "string"
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseInfoModule"
            }
          },
          "productName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          }
        }
      },
      "AuthStatusRoles": {
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SectionRights": {
        "type": "object",
        "required": [
          "read"
        ],
        "properties": {
          "edit": {
            "type": "boolean"
          },
          "read": {
            "type": "boolean"
          },
          "editGroup": {
            "type": "boolean"
          },
          "editRole": {
            "type": "boolean"
          },
          "editUser": {
            "type": "boolean"
          }
        }
      },
      "AuthStatus": {
        "properties": {
          "authenticated": {
            "type": "boolean"
          },
          "productInfo": {
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/components/schemas/AuthStatusProductName"
              },
              "version": {
                "type": "string"
              }
            }
          },
          "needToChangePassword": {
            "type": "boolean"
          },
          "user": {
            "type": "string"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lang": {
            "type": "string"
          },
          "license": {
            "$ref": "#/components/schemas/LicenseInfo"
          },
          "inactiveTimeout": {
            "type": "integer"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthStatusRoles"
            }
          },
          "permissions": {
            "type": "object",
            "required": [
              "sections",
              "nonAuthenticatedPersonDataAccess",
              "dossierDataFullAccess"
            ],
            "properties": {
              "sections": {
                "type": "object",
                "required": [
                  "dashboard",
                  "dossier",
                  "policy",
                  "stat",
                  "rights",
                  "system",
                  "ips"
                ],
                "properties": {
                  "dashboard": {
                    "$ref": "#/components/schemas/SectionRights"
                  },
                  "dossier": {
                    "$ref": "#/components/schemas/SectionRights"
                  },
                  "policy": {
                    "$ref": "#/components/schemas/SectionRights"
                  },
                  "stat": {
                    "$ref": "#/components/schemas/SectionRights"
                  },
                  "rights": {
                    "$ref": "#/components/schemas/SectionRights"
                  },
                  "system": {
                    "$ref": "#/components/schemas/SectionRights"
                  },
                  "ips": {
                    "$ref": "#/components/schemas/SectionRights"
                  },
                  "network": {
                    "$ref": "#/components/schemas/SectionRights"
                  }
                }
              },
              "nonAuthenticatedPersonDataAccess": {
                "type": "boolean"
              },
              "dossierDataFullAccess": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "AuthCredentials": {
        "type": "object",
        "required": [
          "login",
          "password"
        ],
        "properties": {
          "login": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "ModificationInfo": {
        "type": "object",
        "required": [
          "author",
          "date"
        ],
        "properties": {
          "author": {
            "type": "string",
            "example": "Admin"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-28T15:30:10.067999"
          }
        }
      },
      "AuthRepr": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "blocked": {
            "type": "boolean"
          },
          "isLocal": {
            "type": "boolean"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthRepr"
            }
          }
        }
      },
      "RoleEntity": {
        "type": "object",
        "required": [
          "name",
          "users",
          "allow",
          "except",
          "sections"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "creation": {
            "$ref": "#/components/schemas/ModificationInfo"
          },
          "modification": {
            "$ref": "#/components/schemas/ModificationInfo"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "allow": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "except": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "sections": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "allPersons": {
            "type": "boolean"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthRepr"
            }
          }
        }
      },
      "Role": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoleEntity"
          },
          {
            "type": "object",
            "required": [
              "id",
              "isReadOnly"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "isReadOnly": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "RoleBrief": {
        "type": "object",
        "required": [
          "id",
          "name",
          "isReadOnly"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "isReadOnly": {
            "type": "boolean"
          }
        }
      },
      "UserBrief": {
        "type": "object",
        "required": [
          "login"
        ],
        "properties": {
          "login": {
            "type": "string"
          },
          "blocked": {
            "type": "boolean"
          }
        }
      },
      "LDAPGroup": {
        "type": "object",
        "required": [
          "name",
          "dn",
          "roles",
          "active"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "dn": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthRepr"
            }
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "ChangePassword": {
        "type": "object",
        "required": [
          "oldPassword",
          "password"
        ],
        "properties": {
          "oldPassword": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "LicenseParamType": {
        "type": "string",
        "enum": [
          "license-id",
          "gen-date",
          "by",
          "contract",
          "customer",
          "comment",
          "contacts",
          "product",
          "product-version",
          "installationId",
          "test",
          "maximumPersons",
          "currentPersons"
        ]
      },
      "LicenseParam": {
        "type": "object",
        "required": [
          "id",
          "name",
          "value"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/LicenseParamType"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "LicenseModuleType": {
        "type": "string",
        "enum": [
          "dozor-service",
          "dozor-updates",
          "antivirus",
          "updates",
          "vendor-policy",
          "reverse",
          "webCat",
          "dpi",
          "IPS"
        ]
      },
      "LicenseModuleStatus": {
        "type": "string",
        "enum": [
          "normal",
          "warning",
          "critical"
        ]
      },
      "LicenseModuleParamType": {
        "type": "string",
        "enum": [
          "start-date",
          "end-date"
        ]
      },
      "LicenseModuleParam": {
        "type": "object",
        "required": [
          "id",
          "name",
          "value"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/LicenseModuleParamType"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "LicenseModule": {
        "type": "object",
        "required": [
          "id",
          "name",
          "status",
          "params"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/LicenseModuleType"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/LicenseModuleStatus"
          },
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseModuleParam"
            }
          }
        }
      },
      "LicenseBrief": {
        "type": "object",
        "required": [
          "params",
          "modules"
        ],
        "properties": {
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseParam"
            }
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseModule"
            }
          }
        }
      },
      "GrafanaDashboardItem": {
        "properties": {
          "id": {
            "type": "number"
          },
          "isStarred": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "folderId": {
            "type": "number"
          },
          "folderTitle": {
            "type": "string"
          },
          "folderUrl": {
            "type": "string"
          }
        }
      },
      "GrafanaDashboard": {
        "properties": {
          "dashboard": {
            "type": "object"
          },
          "meta": {
            "type": "object"
          }
        }
      },
      "Node": {
        "type": "object",
        "required": [
          "id",
          "name",
          "hostname"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique node identifier\n",
            "example": "834a08c6-b2d4-4b1a-a0f3-5cb72e46ee25"
          },
          "name": {
            "type": "string",
            "description": "Custom node name\n",
            "example": "http filter 1"
          },
          "hostname": {
            "type": "string",
            "description": "Name of host that represents the node\n",
            "example": "filter1.web-proxy.some-company.com"
          },
          "subclusterName": {
            "type": "string",
            "description": "Name of subcluster to which the node belongs (only in case the node is part of subcluster)\n",
            "example": "subcluster 1"
          }
        }
      },
      "Nodes": {
        "type": "object",
        "required": [
          "nodes",
          "nodesTotal"
        ],
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Node"
            }
          },
          "nodesTotal": {
            "type": "integer",
            "description": "Total count of nodes that can be returned by request\n",
            "example": 20
          }
        }
      },
      "ErrorResult": {
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "It will always be false.\n",
            "example": false
          },
          "message": {
            "type": "string",
            "description": "Some message describes the error.\n",
            "example": "Error while operation"
          },
          "code": {
            "type": "string",
            "description": "Code that may specify additional details of the error.\n",
            "default": null
          },
          "details": {
            "type": "string",
            "description": "Some detailed description.\n",
            "default": null
          }
        }
      },
      "ConfigActionMarker": {
        "type": "object",
        "required": [
          "date",
          "user"
        ],
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-28T15:30:10.067999"
          },
          "user": {
            "type": "string",
            "example": "Admin"
          },
          "comment": {
            "type": "string",
            "example": "Changed administrative distance for static route to 20.0.0.1/32 on node-1"
          }
        }
      },
      "ConfigStatusInfo": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "CHANGED",
              "APPLIED"
            ],
            "description": "Status of configuration.\n  - CHANGED - the configuration has been changed since it was last applied\n  - APPLIED - the current configuration has been applied, and after applying it has not changed\n",
            "example": "CHANGED"
          },
          "lastChange": {
            "$ref": "#/components/schemas/ConfigActionMarker",
            "description": "Marker of last changing\n"
          },
          "lastApply": {
            "$ref": "#/components/schemas/ConfigActionMarker",
            "description": "Marker of last applying\n"
          }
        }
      },
      "RouteNodeId": {
        "type": "string",
        "format": "uuid",
        "description": "Unique identifier of node for which route is configured\n",
        "example": "834a08c6-b2d4-4b1a-a0f3-5cb72e46ee25"
      },
      "RouteName": {
        "type": "string",
        "description": "Custom route name\n",
        "example": "Network a31"
      },
      "RouteNetwork": {
        "type": "object",
        "required": [
          "type",
          "address"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Host",
              "SubNet",
              "Default"
            ],
            "description": "Type of destination network address.\n  - Host - IP address in format x.x.x.x\n  - SubNet - subnet address in format x.x.x.x/y\n  - Default - marker of default route, address must be 0.0.0.0/0\n",
            "example": "SubNet"
          },
          "address": {
            "type": "string",
            "description": "Destination network address.\n\nNOTE: \n  - For Default type, address must always be 0.0.0.0/0.\n  - If SubNet type has address x.x.x.x/32, then it will be converted to Host type with address x.x.x.x\n",
            "example": "10.0.0.1/24"
          }
        }
      },
      "RouteGateway": {
        "type": "string",
        "description": "IP address to use as next-hop.\n",
        "example": "10.0.0.3"
      },
      "AdministrativeDistance": {
        "type": "integer",
        "format": "int32",
        "description": "Administrative distance for the route.\nCan take values from 1 to 254 inclusive.\nIf it is not specified during creation, then it will be set to 1 by default.\n",
        "example": 1
      },
      "RouteBaseInfo": {
        "type": "object",
        "required": [
          "id",
          "nodeId",
          "name",
          "network",
          "gateway",
          "admDistance"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique route identifier\n",
            "example": "dce29979-620c-453a-a643-62eb4792817f"
          },
          "nodeId": {
            "$ref": "#/components/schemas/RouteNodeId"
          },
          "name": {
            "$ref": "#/components/schemas/RouteName"
          },
          "network": {
            "$ref": "#/components/schemas/RouteNetwork"
          },
          "gateway": {
            "$ref": "#/components/schemas/RouteGateway"
          },
          "admDistance": {
            "$ref": "#/components/schemas/AdministrativeDistance"
          }
        }
      },
      "RouteStatusInfo": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ],
            "example": "active"
          }
        }
      },
      "RouteBaseWidthStatusInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RouteBaseInfo"
          },
          {
            "$ref": "#/components/schemas/RouteStatusInfo"
          }
        ]
      },
      "AuditTrail": {
        "type": "object",
        "required": [
          "modification"
        ],
        "properties": {
          "creation": {
            "$ref": "#/components/schemas/ModificationInfo"
          },
          "modification": {
            "$ref": "#/components/schemas/ModificationInfo"
          }
        }
      },
      "AuditTrailInfo": {
        "type": "object",
        "properties": {
          "auditTrail": {
            "$ref": "#/components/schemas/AuditTrail"
          }
        }
      },
      "RouteBaseWidthStatusWidthAuditTrailInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RouteBaseWidthStatusInfo"
          },
          {
            "$ref": "#/components/schemas/AuditTrailInfo"
          }
        ]
      },
      "IfName": {
        "type": "string",
        "description": "Name of used interface.\n",
        "example": "eth0"
      },
      "ConnectedRouteInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RouteBaseWidthStatusWidthAuditTrailInfo"
          },
          {
            "type": "object",
            "required": [
              "ifname"
            ],
            "properties": {
              "ifname": {
                "$ref": "#/components/schemas/IfName"
              }
            }
          }
        ]
      },
      "ConnectedRoutes": {
        "type": "object",
        "required": [
          "routes",
          "routesTotal"
        ],
        "properties": {
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectedRouteInfo"
            }
          },
          "routesTotal": {
            "type": "integer",
            "description": "Total count of routes that can be returned by request\n",
            "example": 100
          }
        }
      },
      "ConnectedRouteUpdateReq": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/RouteName"
          }
        }
      },
      "RouteEnabled": {
        "type": "boolean",
        "description": "True if the route is enabled.\n",
        "example": true
      },
      "StaticRouteInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RouteBaseWidthStatusWidthAuditTrailInfo"
          },
          {
            "type": "object",
            "required": [
              "enabled"
            ],
            "properties": {
              "enabled": {
                "$ref": "#/components/schemas/RouteEnabled"
              }
            }
          }
        ]
      },
      "StaticRoutes": {
        "type": "object",
        "required": [
          "routes",
          "routesTotal"
        ],
        "properties": {
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaticRouteInfo"
            }
          },
          "routesTotal": {
            "type": "integer",
            "description": "Total count of routes that can be returned by request\n",
            "example": 100
          }
        }
      },
      "StaticRouteCreateReq": {
        "type": "object",
        "required": [
          "name",
          "nodeId",
          "network",
          "gateway"
        ],
        "properties": {
          "nodeId": {
            "$ref": "#/components/schemas/RouteNodeId"
          },
          "name": {
            "$ref": "#/components/schemas/RouteName"
          },
          "network": {
            "$ref": "#/components/schemas/RouteNetwork"
          },
          "gateway": {
            "$ref": "#/components/schemas/RouteGateway"
          },
          "admDistance": {
            "$ref": "#/components/schemas/AdministrativeDistance"
          }
        }
      },
      "StaticRouteEnableReq": {
        "type": "object",
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "$ref": "#/components/schemas/RouteEnabled"
          }
        }
      },
      "StaticRouteUpdateReq": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/RouteName"
          },
          "network": {
            "$ref": "#/components/schemas/RouteNetwork"
          },
          "gateway": {
            "$ref": "#/components/schemas/RouteGateway"
          },
          "admDistance": {
            "$ref": "#/components/schemas/AdministrativeDistance"
          }
        }
      },
      "Source": {
        "description": "IP ranges (IDs from the resources dictionary; for IPs - also literal values), Persons or Person Groups (IDs from the Address Book)",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SubnetMask",
              "IpLiteral",
              "IpReference",
              "Person",
              "Group",
              "NonAuthenticated",
              "ConditionRef",
              "And",
              "Or",
              "Not"
            ]
          }
        },
        "discriminator": {
          "propertyName": "type"
        },
        "required": [
          "type"
        ]
      },
      "IpLiteral": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Source"
          },
          {
            "type": "object",
            "required": [
              "type",
              "value",
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SubnetMask": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Source"
          },
          {
            "type": "object",
            "required": [
              "type",
              "value",
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Port": {
        "required": [
          "begin",
          "end"
        ],
        "properties": {
          "begin": {
            "type": "integer"
          },
          "end": {
            "type": "integer"
          }
        }
      },
      "NetworkRuleAction": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "NetworkLayerRule": {
        "required": [
          "name",
          "enabled",
          "comment",
          "source",
          "destination",
          "section",
          "action",
          "protocols",
          "ports",
          "logsEnabled"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "comment": {
            "type": "string"
          },
          "source": {
            "description": "Ids from ip ranges",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IpLiteral"
                },
                {
                  "$ref": "#/components/schemas/SubnetMask"
                }
              ]
            }
          },
          "destination": {
            "description": "Ids from IP resources dictionary",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IpLiteral"
                },
                {
                  "$ref": "#/components/schemas/SubnetMask"
                }
              ]
            }
          },
          "section": {
            "type": "string",
            "enum": [
              "input",
              "output",
              "forward"
            ]
          },
          "protocols": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Port"
            }
          },
          "logsEnabled": {
            "type": "boolean"
          },
          "action": {
            "$ref": "#/components/schemas/NetworkRuleAction"
          }
        }
      },
      "afterId": {
        "description": "Items\"s id to move after",
        "properties": {
          "after": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "after"
        ]
      },
      "NetworkLayerRuleUpdateParameters": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "NatRuleAction": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "NatLayerRule": {
        "required": [
          "name",
          "enabled",
          "comment",
          "source",
          "interface",
          "snatIp",
          "action",
          "logsEnabled"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "comment": {
            "type": "string"
          },
          "source": {
            "description": "Ids from ip ranges",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IpLiteral"
                },
                {
                  "$ref": "#/components/schemas/SubnetMask"
                }
              ]
            }
          },
          "interface": {
            "description": "Network Interace",
            "type": "string"
          },
          "snatIp": {
            "description": "IP for SNAT",
            "type": "string"
          },
          "logsEnabled": {
            "type": "boolean"
          },
          "action": {
            "$ref": "#/components/schemas/NatRuleAction"
          }
        }
      },
      "NatLayerRuleUpdateParameters": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "DpiRuleAction": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "DpiLayerRule": {
        "required": [
          "name",
          "enabled",
          "comment",
          "source",
          "destination",
          "action",
          "dpiProtocols"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "comment": {
            "type": "string"
          },
          "source": {
            "description": "Ids from ip ranges",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IpLiteral"
                },
                {
                  "$ref": "#/components/schemas/SubnetMask"
                }
              ]
            }
          },
          "destination": {
            "description": "Ids from IP resources dictionary",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IpLiteral"
                },
                {
                  "$ref": "#/components/schemas/SubnetMask"
                }
              ]
            }
          },
          "dpiProtocols": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "action": {
            "$ref": "#/components/schemas/DpiRuleAction"
          }
        }
      },
      "DpiLayerRuleUpdateParameters": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "DpiProtocolsListItem": {
        "required": [
          "name",
          "id",
          "title"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "protocols": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DpiProtocolsListItem"
            }
          }
        }
      },
      "TypedPolicyItem": {
        "required": [
          "type",
          "id",
          "name"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "IpReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypedPolicyItem"
          }
        ]
      },
      "ConditionRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypedPolicyItem"
          }
        ]
      },
      "Destination": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UrlLiteral",
              "UrlReference",
              "UrlCategory",
              "IpLiteral",
              "IpReference",
              "ConditionRef",
              "And",
              "Or",
              "Not"
            ]
          }
        },
        "discriminator": {
          "propertyName": "type"
        },
        "required": [
          "type"
        ]
      },
      "And": {
        "type": "object",
        "properties": {
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Destination"
            }
          }
        }
      },
      "Or": {
        "type": "object",
        "properties": {
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Destination"
            }
          }
        }
      },
      "Not": {
        "type": "object",
        "properties": {
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Destination"
            }
          }
        }
      },
      "UrlLiteral": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Destination"
          },
          {
            "type": "object",
            "required": [
              "type",
              "value",
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "UrlReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypedPolicyItem"
          }
        ]
      },
      "Protocol": {
        "type": "string",
        "enum": [
          "http",
          "https",
          "ftp"
        ]
      },
      "Method": {
        "type": "string",
        "enum": [
          "get",
          "post",
          "head",
          "options",
          "propfind",
          "mkcol",
          "delete",
          "copy",
          "move",
          "put",
          "lock",
          "unlock",
          "patch",
          "connect",
          "trace",
          "proppatch"
        ]
      },
      "AuthenticationBypassAction": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "doNothing",
              "linkAutomatically",
              "linkManually"
            ]
          },
          "person": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "AuthLayerExclusion": {
        "required": [
          "name",
          "enabled",
          "comment",
          "source",
          "destination",
          "protocols",
          "methods",
          "ports",
          "headers",
          "action"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "comment": {
            "type": "string"
          },
          "source": {
            "description": "Ids from ip ranges",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IpLiteral"
                },
                {
                  "$ref": "#/components/schemas/IpReference"
                },
                {
                  "$ref": "#/components/schemas/SubnetMask"
                },
                {
                  "$ref": "#/components/schemas/ConditionRef"
                },
                {
                  "$ref": "#/components/schemas/And"
                },
                {
                  "$ref": "#/components/schemas/Or"
                },
                {
                  "$ref": "#/components/schemas/Not"
                }
              ]
            }
          },
          "destination": {
            "description": "Ids from url resources dictionary",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UrlLiteral"
                },
                {
                  "$ref": "#/components/schemas/UrlReference"
                },
                {
                  "$ref": "#/components/schemas/IpLiteral"
                },
                {
                  "$ref": "#/components/schemas/IpReference"
                }
              ]
            }
          },
          "protocols": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Protocol"
            }
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Method"
            }
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Port"
            }
          },
          "headers": {
            "description": "Lists of headers conditions",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "action": {
            "$ref": "#/components/schemas/AuthenticationBypassAction"
          }
        },
        "example": {
          "id": "09159ca3-508f-4e49-a950-372606e46c8a",
          "name": "some name",
          "enabled": true,
          "comment": "very important exclusion"
        }
      },
      "authLayerExclusionUpdateParameters": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "schemas-AuditTrail": {
        "description": "Information about the creation and last modification of an entity",
        "type": "object",
        "properties": {
          "creation": {
            "$ref": "#/components/schemas/ModificationInfo"
          },
          "modification": {
            "$ref": "#/components/schemas/ModificationInfo"
          }
        }
      },
      "DecryptionInstruction": {
        "required": [
          "name",
          "type",
          "enabled",
          "source",
          "destination",
          "auditTrail"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rule",
              "exclusion"
            ]
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "source": {
            "description": "IP ranges (literal or referenced by ID), IP addresses (literal), Persons (references) or Person Groups (references)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          },
          "destination": {
            "description": "IDs from the URL resources dictionary",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Destination"
            }
          },
          "auditTrail": {
            "$ref": "#/components/schemas/schemas-AuditTrail"
          },
          "comment": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "name": "My decryption instruction",
          "type": "rule",
          "enabled": true,
          "source": [
            {
              "type": "Person",
              "id": "11111111-508f-4e49-a950-372606e46c8a",
              "name": "Ruslan Boshirov"
            },
            {
              "type": "Person",
              "id": "11111111-508f-4e49-a950-372606e46c8b",
              "name": "Aleksandr Petrov"
            },
            {
              "type": "Group",
              "id": "11111111-508f-4e49-a950-372606e46c8c",
              "name": "Newcomers"
            }
          ],
          "destination": [
            {
              "type": "UrlLiteral",
              "name": "StackOverflow",
              "value": "*.stackoverflow.com"
            },
            {
              "type": "UrlReference",
              "id": "22222222-508f-4e49-a950-372606e46c8b",
              "name": "Wikipedia"
            },
            {
              "type": "UrlCategory",
              "id": "1",
              "name": "Education"
            }
          ],
          "comment": "My comment",
          "id": "09159ca3-508f-4e49-a950-372606e46c8b"
        }
      },
      "decryptionInstructionUpdateParameters": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "InformationVolumeUnit": {
        "type": "string",
        "enum": [
          "B",
          "KB",
          "MB",
          "GB",
          "TB"
        ]
      },
      "InformationVolume": {
        "type": "object",
        "required": [
          "number",
          "unit"
        ],
        "properties": {
          "number": {
            "type": "integer"
          },
          "unit": {
            "$ref": "#/components/schemas/InformationVolumeUnit"
          }
        }
      },
      "FileSizeRange": {
        "properties": {
          "from": {
            "$ref": "#/components/schemas/InformationVolume"
          },
          "to": {
            "$ref": "#/components/schemas/InformationVolume"
          }
        }
      },
      "IcapInstruction": {
        "required": [
          "name",
          "type",
          "enabled",
          "source",
          "destination",
          "auditTrail",
          "protocols",
          "methods",
          "ports",
          "fileFormats",
          "fileSizeRange"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rule",
              "exclusion"
            ]
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "source": {
            "description": "IP ranges (IDs from the resources dictionary; for IPs - also literal values), Persons or Person Groups (IDs from the Address Book)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          },
          "destination": {
            "description": "IDs from the URL resources dictionary",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Destination"
            }
          },
          "auditTrail": {
            "$ref": "#/components/schemas/schemas-AuditTrail"
          },
          "comment": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "protocols": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Protocol"
            }
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Method"
            }
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Port"
            }
          },
          "fileFormats": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSizeRange": {
            "$ref": "#/components/schemas/FileSizeRange"
          }
        }
      },
      "IcapAction": {
        "required": [
          "type",
          "server"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "request",
              "response",
              "both"
            ]
          },
          "server": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "IcapRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IcapInstruction"
          },
          {
            "type": "object",
            "properties": {
              "action": {
                "$ref": "#/components/schemas/IcapAction"
              }
            }
          }
        ]
      },
      "icapInstructionUpdateParameters": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "SetIp": {
        "required": [
          "value",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "setIp"
            ]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "RedirectToProxy": {
        "required": [
          "value",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "redirectToProxy"
            ]
          },
          "value": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "SetDSCPLabel": {
        "required": [
          "value",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "setDSCPLabel"
            ]
          },
          "value": {
            "type": "string",
            "enum": [
              "af11",
              "af12",
              "af13",
              "af21",
              "af22",
              "af23",
              "af31",
              "af32",
              "af33",
              "af41",
              "af42",
              "af43",
              "cs1",
              "cs2",
              "cs3",
              "cs4",
              "cs5",
              "cs6",
              "cs7",
              "default",
              "ef"
            ]
          }
        }
      },
      "RoutingAction": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SetIp"
          },
          {
            "$ref": "#/components/schemas/RedirectToProxy"
          },
          {
            "$ref": "#/components/schemas/SetDSCPLabel"
          }
        ]
      },
      "RoutingInstruction": {
        "required": [
          "name",
          "type",
          "enabled",
          "source",
          "destination",
          "auditTrail",
          "protocols",
          "ports"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rule",
              "exclusion"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "auditTrail": {
            "$ref": "#/components/schemas/schemas-AuditTrail"
          },
          "enabled": {
            "type": "boolean"
          },
          "priority": {
            "type": "integer"
          },
          "protocols": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Protocol"
            }
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Port"
            }
          },
          "source": {
            "description": "IP ranges (literal or referenced by ID), IP addresses (literal), Persons (references) or Person Groups (references)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          },
          "destination": {
            "description": "IDs from the URL resources dictionary",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Destination"
            }
          },
          "action": {
            "description": "Main action",
            "$ref": "#/components/schemas/RoutingAction"
          },
          "additionalActions": {
            "description": "Additional actions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutingAction"
            }
          }
        }
      },
      "routingInstructionUpdateParameters": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "IspInstruction": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "RequestLayer": {
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "schema": {
            "type": "string"
          }
        }
      },
      "requestLayerUpdateParameters": {
        "properties": {
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "copyOf": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ]
      },
      "Keyword": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "threshold": {
            "type": "integer"
          },
          "tika": {
            "type": "boolean"
          },
          "filterHtmlAsis": {
            "type": "boolean"
          },
          "ignoreDuplicate": {
            "type": "boolean"
          }
        }
      },
      "RequestFilterInstruction": {
        "type": "object",
        "required": [
          "name",
          "type",
          "enabled",
          "source",
          "destination",
          "auditTrail",
          "protocols",
          "methods",
          "ports",
          "headers",
          "fileFormats",
          "fileSizeRange",
          "schedules",
          "quotas"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rule",
              "exclusion"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "comment": {
            "type": "string"
          },
          "auditTrail": {
            "$ref": "#/components/schemas/schemas-AuditTrail"
          },
          "source": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          },
          "destination": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Destination"
            }
          },
          "protocols": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Protocol"
            }
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Method"
            }
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Port"
            }
          },
          "fileFormats": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSizeRange": {
            "$ref": "#/components/schemas/FileSizeRange"
          },
          "keyword": {
            "$ref": "#/components/schemas/Keyword"
          },
          "headers": {
            "description": "Item ids from headers lists",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "schedules": {
            "description": "Item ids from schedules lists",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "quotas": {
            "description": "Item ids from quotas (traffic limit) lists",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "example": {
          "type": "rule",
          "id": "09159ca3-508f-4e49-a950-372606e46c8b",
          "name": "My request filter instruction",
          "enabled": true,
          "comment": "My comment",
          "source": [],
          "destination": [],
          "protocols": [],
          "methods": [],
          "ports": [],
          "fileFormats": [],
          "fileSizeRange": {},
          "keyword": {
            "id": "09159ca3-508f-4e49-a950-372606e46c8b",
            "threshold": 0,
            "tika": false,
            "filterHtmlAsis": false,
            "ignoreDuplicate": false
          },
          "headers": [],
          "schedules": [],
          "quotas": []
        }
      },
      "RequestFilterRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RequestFilterInstruction"
          },
          {
            "type": "object",
            "properties": {
              "priority": {
                "type": "integer"
              }
            }
          }
        ]
      },
      "RequestFilterExclusion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RequestFilterInstruction"
          }
        ]
      },
      "toggleParameters": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "ResponseLayer": {
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "schema": {
            "type": "string"
          }
        }
      },
      "ResponseFilterInstruction": {
        "type": "object",
        "required": [
          "name",
          "type",
          "enabled",
          "source",
          "destination",
          "auditTrail",
          "protocols",
          "methods",
          "ports",
          "headers",
          "fileFormats",
          "fileSizeRange",
          "schedules",
          "quotas"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rule",
              "exclusion"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "comment": {
            "type": "string"
          },
          "auditTrail": {
            "$ref": "#/components/schemas/schemas-AuditTrail"
          },
          "source": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          },
          "destination": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Destination"
            }
          },
          "protocols": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Protocol"
            }
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Method"
            }
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Port"
            }
          },
          "fileFormats": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileSizeRange": {
            "$ref": "#/components/schemas/FileSizeRange"
          },
          "keyword": {
            "$ref": "#/components/schemas/Keyword"
          },
          "headers": {
            "description": "Item ids from headers lists",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "schedules": {
            "description": "Item ids from schedules lists",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "quotas": {
            "description": "Item ids from quotas (traffic limit) lists",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "example": {
          "type": "rule",
          "id": "09159ca3-508f-4e49-a950-372606e46c8b",
          "name": "My response filter instruction",
          "enabled": true,
          "comment": "My comment",
          "source": [],
          "destination": [],
          "protocols": [],
          "methods": [],
          "ports": [],
          "fileFormats": [],
          "fileSizeRange": {},
          "keyword": {
            "id": "09159ca3-508f-4e49-a950-372606e46c8b",
            "threshold": 0,
            "tika": false,
            "filterHtmlAsis": false,
            "ignoreDuplicate": false
          },
          "headers": [],
          "schedules": [],
          "quotas": []
        }
      },
      "ResponseFilterRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseFilterInstruction"
          },
          {
            "type": "object",
            "properties": {
              "priority": {
                "type": "integer"
              }
            }
          }
        ]
      },
      "ResponseFilterExclusion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseFilterInstruction"
          }
        ]
      },
      "PolicyItemCommon": {
        "required": [
          "name",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date"
          },
          "createdBy": {
            "type": "string"
          },
          "modified": {
            "type": "string",
            "format": "date"
          },
          "modifiedBy": {
            "type": "string"
          },
          "isTooLarge": {
            "type": "boolean"
          },
          "copyOf": {
            "type": "string"
          }
        }
      },
      "PolicyItemUnitCommon": {
        "required": [
          "name",
          "comment"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "comment": {
            "type": "string"
          },
          "creation": {
            "$ref": "#/components/schemas/ModificationInfo"
          },
          "modification": {
            "$ref": "#/components/schemas/ModificationInfo"
          }
        }
      },
      "PolicyItemConditionSourceUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "$ref": "#/components/schemas/Source"
              },
              "condition": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemConditionSourceUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemConditionSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemConditionSourceUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemConditionDestUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "$ref": "#/components/schemas/Destination"
              },
              "condition": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemConditionDestUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemConditionDest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemConditionDestUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemIpRangeUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "begin": {
                "type": "string"
              },
              "end": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyItemIpRange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemIpRangeUnit"
                }
              }
            }
          }
        ]
      },
      "LimitPeriod": {
        "type": "string",
        "enum": [
          "h",
          "d",
          "w",
          "m"
        ]
      },
      "TrafficLimitUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "$ref": "#/components/schemas/LimitPeriod"
              },
              "limit": {
                "type": "integer"
              },
              "informationUnit": {
                "$ref": "#/components/schemas/InformationVolumeUnit"
              }
            }
          }
        ]
      },
      "TrafficLimit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TrafficLimitUnit"
                }
              }
            }
          }
        ]
      },
      "ProxyServerUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "ip": {
                "type": "string"
              },
              "port": {
                "type": "integer"
              },
              "login": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ProxyServer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProxyServerUnit"
                }
              }
            }
          }
        ]
      },
      "IcapServerUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              }
            }
          }
        ]
      },
      "IcapServer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IcapServerUnit"
                }
              }
            }
          }
        ]
      },
      "ScheduleUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "begin-hour": {
                "type": "integer"
              },
              "begin-minute": {
                "type": "integer"
              },
              "end-hour": {
                "type": "integer"
              },
              "end-minute": {
                "type": "integer"
              },
              "monday": {
                "type": "boolean"
              },
              "tuesday": {
                "type": "boolean"
              },
              "wednesday": {
                "type": "boolean"
              },
              "thursday": {
                "type": "boolean"
              },
              "friday": {
                "type": "boolean"
              },
              "saturday": {
                "type": "boolean"
              },
              "sunday": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "Schedule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScheduleUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemKeywordUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "regex": {
                "type": "boolean"
              },
              "string": {
                "type": "string"
              },
              "weight": {
                "type": "integer"
              }
            }
          }
        ]
      },
      "PolicyItemKeyword": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemKeywordUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemUserUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "begin": {
                "type": "string"
              },
              "end": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyItemUser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "password": {
                "type": "string"
              },
              "isBlocked": {
                "type": "boolean"
              },
              "ips": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemUserUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemHeaderUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "name-string": {
                "type": "string"
              },
              "name-regex": {
                "type": "string"
              },
              "value-string": {
                "type": "string"
              },
              "value-regex": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyItemHeader": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemHeaderUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemHeaderAdderUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "direction": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyItemHeaderAdder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemHeaderAdderUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemHeaderModifierUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "name-pattern": {
                "type": "string"
              },
              "replacement": {
                "type": "string"
              },
              "value-pattern": {
                "type": "string"
              },
              "subvalue-pattern": {
                "type": "string"
              },
              "direction": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyItemHeaderModifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemHeaderModifierUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemHeaderDeleterUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "name-pattern": {
                "type": "string"
              },
              "value-pattern": {
                "type": "string"
              },
              "direction": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyItemHeaderDeleter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemHeaderDeleterUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemEmailUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "email": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "port": {
                "type": "integer"
              }
            }
          }
        ]
      },
      "PolicyItemEmail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemEmailUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemUrlUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "expression": {
                "type": "string"
              },
              "expression-type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyItemUrl": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemUrlUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemTemplateUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "mimeType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyItemTemplate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "string"
              },
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemTemplateUnit"
                }
              }
            }
          }
        ]
      },
      "PolicyItemFileUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemUnitCommon"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "md5",
                  "sha1",
                  "sha256",
                  "filename-eq",
                  "filename-regexp",
                  "filesize"
                ]
              },
              "value": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              }
            }
          }
        ]
      },
      "PolicyItemFile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyItemCommon"
          },
          {
            "type": "object",
            "properties": {
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyItemFileUnit"
                }
              }
            }
          }
        ]
      },
      "Type": {
        "required": [
          "id",
          "name",
          "mimeTypes",
          "extensions"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "mimeTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "extensions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Category": {
        "required": [
          "id",
          "name",
          "types"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            }
          }
        }
      },
      "CategoryGroup": {
        "required": [
          "id",
          "name",
          "category"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "category": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          }
        }
      },
      "Marker": {
        "required": [
          "title"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "auditTrail": {
            "$ref": "#/components/schemas/schemas-AuditTrail"
          }
        },
        "example": {
          "id": "09159ca3-508f-4e49-a950-372606e46c8b",
          "title": "marker",
          "comment": "comment"
        }
      },
      "AddLogMarker": {
        "required": [
          "marker"
        ],
        "properties": {
          "marker": {
            "$ref": "#/components/schemas/Marker"
          }
        }
      },
      "CheckRegExp": {
        "required": [
          "checkList",
          "expression"
        ],
        "properties": {
          "checkList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expression": {
            "type": "string"
          }
        }
      },
      "RegExpSyntaxError": {
        "required": [
          "message",
          "details"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "details": {
            "type": "string"
          }
        }
      },
      "CheckResultDTO": {
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "error": {
            "$ref": "#/components/schemas/RegExpSyntaxError"
          }
        }
      },
      "PolicyRepr": {
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "UrlInstructionInfo": {
        "required": [
          "layer",
          "instructions"
        ],
        "properties": {
          "layer": {
            "type": "string"
          },
          "subLayer": {
            "$ref": "#/components/schemas/PolicyRepr"
          },
          "instructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRepr"
            }
          }
        }
      },
      "UrlInfoDTO": {
        "required": [
          "urlLists",
          "categories",
          "instructions"
        ],
        "properties": {
          "urlLists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRepr"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "instructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UrlInstructionInfo"
            }
          }
        }
      },
      "InstructionInfo": {
        "required": [
          "layer",
          "instructions"
        ],
        "properties": {
          "layer": {
            "type": "string"
          },
          "subLayer": {
            "$ref": "#/components/schemas/PolicyRepr"
          },
          "instructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRepr"
            }
          }
        }
      },
      "ItemExportableTypes": {
        "type": "string",
        "enum": [
          "icap-server",
          "proxy-server"
        ]
      },
      "ItemListExportableTypes": {
        "type": "string",
        "enum": [
          "email",
          "header",
          "header-adder",
          "header-deleter",
          "header-modifier",
          "ip",
          "keyword",
          "time",
          "url",
          "all-markers"
        ]
      },
      "ItemListPolicyItemsTypes": {
        "type": "string",
        "enum": [
          "icap-server",
          "ip",
          "categories",
          "proxy-server",
          "email",
          "file",
          "header",
          "header-adder",
          "header-deleter",
          "header-modifier",
          "ip-range",
          "keyword",
          "template",
          "time",
          "traffic-limit",
          "url",
          "source-condition",
          "destination-condition",
          "all-markers"
        ]
      },
      "AnyObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "Group": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "leaf",
          "expand",
          "monitored",
          "editable",
          "stateOfRules",
          "extendable"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "section",
              "group"
            ]
          },
          "leaf": {
            "type": "boolean"
          },
          "expand": {
            "type": "boolean"
          },
          "monitored": {
            "type": "boolean"
          },
          "editable": {
            "type": "boolean"
          },
          "stateOfRules": {
            "type": "string"
          },
          "extendable": {
            "type": "boolean"
          },
          "parentId": {
            "type": "string"
          },
          "groupType": {
            "$ref": "#/components/schemas/GroupType"
          }
        }
      },
      "GroupType": {
        "type": "string",
        "enum": [
          "manual",
          "ldgroup",
          "orgunit",
          "grok"
        ]
      },
      "Tree": {
        "type": "object",
        "required": [
          "groups"
        ],
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          }
        }
      },
      "GroupSaveRequest": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "section",
              "group"
            ]
          }
        }
      },
      "GroupCreateResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          }
        }
      },
      "Person": {
        "type": "object",
        "required": [
          "personId",
          "fullname",
          "deletable",
          "canLeaveGroup"
        ],
        "properties": {
          "personId": {
            "type": "string"
          },
          "fullname": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "deletable": {
            "type": "boolean"
          },
          "canLeaveGroup": {
            "type": "boolean"
          }
        }
      },
      "GroupPersonsResponse": {
        "type": "object",
        "required": [
          "persons",
          "total"
        ],
        "properties": {
          "persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "total": {
            "type": "number"
          }
        }
      },
      "GroupPersonsUpdateRequest": {
        "type": "object",
        "properties": {
          "personsAdd": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "personsDelete": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchResponseGroups": {
        "type": "object",
        "required": [
          "id",
          "name",
          "deletable",
          "editable",
          "groupType"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "deletable": {
            "type": "boolean"
          },
          "editable": {
            "type": "boolean"
          },
          "groupType": {
            "$ref": "#/components/schemas/GroupType"
          },
          "locId": {
            "type": "string"
          },
          "path": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "name"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "source": {
            "type": "object",
            "required": [
              "id",
              "name",
              "single"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "single": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "SearchResponsePersons": {
        "type": "object",
        "required": [
          "personId",
          "deletable",
          "deleted",
          "fullname"
        ],
        "properties": {
          "personId": {
            "type": "string"
          },
          "deletable": {
            "type": "boolean"
          },
          "deleted": {
            "type": "boolean"
          },
          "fullname": {
            "type": "string"
          }
        }
      },
      "SearchResponse": {
        "type": "object",
        "required": [
          "groups",
          "groupsTotal",
          "persons",
          "personsTotal"
        ],
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResponseGroups"
            }
          },
          "groupsTotal": {
            "type": "number"
          },
          "persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResponsePersons"
            }
          },
          "personsTotal": {
            "type": "number"
          }
        }
      },
      "PersonAddress": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "email",
              "hostname",
              "icq",
              "ip",
              "login",
              "sid",
              "skype",
              "url",
              "windows-login",
              "upn"
            ]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "PersonCreateRequest": {
        "type": "object",
        "required": [
          "fullname",
          "groupIds",
          "addresses"
        ],
        "properties": {
          "fullname": {
            "type": "string"
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonAddress"
            }
          }
        }
      },
      "Department": {
        "type": "object",
        "required": [
          "id",
          "name",
          "dataAccess",
          "path"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "dataAccess": {
            "type": "boolean"
          },
          "path": {
            "type": "array",
            "items": {
              "required": [
                "id",
                "name"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PersonExtraAttribute": {
        "type": "object",
        "required": [
          "id",
          "name",
          "value",
          "editable"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "editable": {
            "type": "boolean"
          }
        }
      },
      "Manager": {
        "type": "object",
        "required": [
          "personId",
          "title",
          "fullname",
          "dataAccess",
          "attributes",
          "department"
        ],
        "properties": {
          "personId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "fullname": {
            "type": "string"
          },
          "dataAccess": {
            "type": "boolean"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonExtraAttribute"
            }
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          }
        }
      },
      "PersonBrief": {
        "type": "object",
        "required": [
          "id",
          "addresses",
          "department",
          "deletable",
          "groups",
          "manager_id",
          "birth_day",
          "office_number",
          "supposeEndWorkDate",
          "actualFired",
          "privileges",
          "office_phone_number",
          "actualHired",
          "telephone_number",
          "fullname",
          "fired",
          "mobile",
          "hired",
          "title",
          "trustLevel"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonAddress"
            }
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "deletable": {
            "type": "boolean"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "monitored": {
                  "type": "boolean"
                },
                "editable": {
                  "type": "boolean"
                },
                "dataAccess": {
                  "type": "boolean"
                }
              }
            }
          },
          "manager": {
            "$ref": "#/components/schemas/Manager"
          },
          "manager_id": {
            "type": "string"
          },
          "birth_day": {
            "type": "string"
          },
          "office_number": {
            "type": "string"
          },
          "supposeEndWorkDate": {
            "type": "string"
          },
          "actualFired": {
            "type": "string"
          },
          "privileges": {
            "type": "string"
          },
          "office_phone_number": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "actualHired": {
            "type": "string"
          },
          "telephone_number": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "fullname": {
            "type": "string"
          },
          "fired": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "mobile": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "hired": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "title": {
            "type": "string"
          },
          "trustLevel": {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PersonExtraNote": {
        "type": "object",
        "required": [
          "id",
          "personId",
          "comment",
          "author",
          "date",
          "deleted"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "personId": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "fileId": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "fileSize": {
            "type": "number"
          }
        }
      },
      "PersonExtraGroup": {
        "type": "object",
        "required": [
          "id",
          "locId",
          "name",
          "monitored",
          "editable",
          "dataAccess"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "locId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "monitored": {
            "type": "boolean"
          },
          "editable": {
            "type": "boolean"
          },
          "dataAccess": {
            "type": "boolean"
          }
        }
      },
      "PersonExtra": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonExtraAttribute"
            }
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonExtraNote"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonExtraGroup"
            }
          }
        }
      },
      "PersonPatchAttribute": {
        "type": "object",
        "required": [
          "name",
          "value",
          "action"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "action": {
            "type": "string",
            "enum": [
              "update",
              "create",
              "delete"
            ]
          }
        }
      },
      "PersonPatchGroups": {
        "type": "object",
        "required": [
          "removeGroups",
          "addGroups"
        ],
        "properties": {
          "addGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "removeGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ReportSendingSchedule": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "daily",
              "weekly",
              "monthly"
            ]
          },
          "startDate": {
            "type": "string"
          },
          "interval": {
            "type": "integer"
          },
          "weekDays": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "months": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "monthType": {
            "type": "string",
            "enum": [
              "interval",
              "weekly",
              "monthly"
            ]
          },
          "monthDays": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "monthWeeks": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "type",
          "startDate"
        ]
      },
      "ReportSendSettings": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "receivers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ]
            }
          },
          "mailSubject": {
            "type": "string"
          },
          "mailText": {
            "type": "string"
          },
          "schedule": {
            "$ref": "#/components/schemas/ReportSendingSchedule"
          }
        },
        "required": [
          "enabled",
          "receivers",
          "mailSubject"
        ]
      },
      "Report": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "parent": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "required": [
                  "id"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "comment": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            ]
          },
          "params": {
            "type": "object"
          },
          "sendSettings": {
            "$ref": "#/components/schemas/ReportSendSettings"
          }
        }
      },
      "ReportFolder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Report"
            }
          }
        }
      },
      "SettingsGroup": {
        "type": "object",
        "required": [
          "id",
          "sectionId",
          "sectionName",
          "name",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "sectionId": {
            "type": "string"
          },
          "sectionName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "hasLocalSettings": {
            "type": "boolean",
            "default": false
          },
          "enabled": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "SettingsParameterItemInt": {
        "type": "object",
        "required": [
          "type",
          "range",
          "type-name",
          "title",
          "path"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "int"
            ]
          },
          "range": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "type-name": {
            "type": "string"
          },
          "attr": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "help": {
            "type": "string"
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default": {
            "type": "number"
          },
          "value": {
            "type": "number"
          }
        }
      },
      "SettingsParameterItemString": {
        "type": "object",
        "required": [
          "type",
          "type-name",
          "title",
          "path"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string"
            ]
          },
          "len": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "negative-regexp": {
            "type": "string"
          },
          "positive-regexp": {
            "type": "string"
          },
          "empty-text": {
            "type": "string"
          },
          "about-value-text": {
            "type": "string"
          },
          "discrete": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "button-text": {
            "type": "string"
          },
          "attr": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "help": {
            "type": "string"
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "SettingsParameterItemBoolean": {
        "type": "object",
        "required": [
          "type",
          "type-name",
          "title",
          "path"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "boolean"
            ]
          },
          "type-name": {
            "type": "string"
          },
          "attr": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "help": {
            "type": "string"
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default": {
            "type": "boolean"
          },
          "value": {
            "type": "boolean"
          }
        }
      },
      "SettingsParameterItemAny": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SettingsParameterItemInt"
          },
          {
            "$ref": "#/components/schemas/SettingsParameterItemString"
          },
          {
            "$ref": "#/components/schemas/SettingsParameterItemBoolean"
          },
          {
            "$ref": "#/components/schemas/SettingsParameterItemRecord"
          },
          {
            "$ref": "#/components/schemas/SettingsParameterItemList"
          },
          {
            "$ref": "#/components/schemas/SettingsParameterItemTag"
          },
          {
            "$ref": "#/components/schemas/SettingsParameterItemUnkonwn"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "int": "#/components/schemas/SettingsParameterItemInt",
            "string": "#/components/schemas/SettingsParameterItemString",
            "boolean": "#/components/schemas/SettingsParameterItemBoolean",
            "record": "#/components/schemas/SettingsParameterItemRecord",
            "list": "#/components/schemas/SettingsParameterItemList",
            "tag": "#/components/schemas/SettingsParameterItemTag"
          }
        }
      },
      "SettingsParameterItemRecord": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "record"
            ]
          },
          "type-name": {
            "type": "string"
          },
          "attr": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "value": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SettingsParameterItemAny"
            }
          }
        }
      },
      "SettingsParameterItemList": {
        "type": "object",
        "required": [
          "type",
          "type-name",
          "title",
          "path"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "list"
            ]
          },
          "type-name": {
            "type": "string"
          },
          "attr": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "help": {
            "type": "string"
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "addValue": {
            "$ref": "#/components/schemas/SettingsParameterItemAny"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingsParameterItemAny"
            }
          }
        }
      },
      "SettingsParameterItemTag": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tag"
            ]
          },
          "type-name": {
            "type": "string"
          },
          "attr": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "value": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SettingsParameterItemAny"
            }
          }
        }
      },
      "SettingsParameterItemUnkonwn": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "unknown"
            ]
          }
        },
        "additionalProperties": {}
      },
      "SettingsSectionItem": {
        "type": "object",
        "required": [
          "service",
          "filename",
          "detailedGroupId",
          "name",
          "global",
          "canBeLocal",
          "type",
          "value"
        ],
        "properties": {
          "service": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "detailedGroupId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "global": {
            "type": "boolean"
          },
          "canBeLocal": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingsParameterItemAny"
            }
          },
          "disabled": {
            "type": "boolean"
          },
          "disableReason": {
            "type": "string"
          }
        }
      },
      "SettingsSearchItem": {
        "type": "object",
        "required": [
          "group",
          "name",
          "filename",
          "service",
          "global",
          "path",
          "title",
          "value",
          "id"
        ],
        "properties": {
          "group": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "global": {
            "type": "boolean"
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "SystemGroupsInfo": {
        "type": "object",
        "required": [
          "dirty",
          "lastAccepted"
        ],
        "properties": {
          "dirty": {
            "type": "boolean"
          },
          "lastAccepted": {
            "type": "object",
            "required": [
              "author",
              "dateTime",
              "message"
            ],
            "properties": {
              "author": {
                "type": "string"
              },
              "dateTime": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "Hosts": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "SubclusterCPUInfo": {
        "type": "object",
        "required": [
          "model",
          "physicalCores",
          "logicalCores"
        ],
        "properties": {
          "model": {
            "type": "string"
          },
          "physicalCores": {
            "type": "number"
          },
          "logicalCores": {
            "type": "number"
          }
        }
      },
      "SubclusterDiskPartitionInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "totalSpace": {
            "type": "number"
          },
          "availableSpace": {
            "type": "number"
          }
        }
      },
      "SubclusterAddress": {
        "type": "object",
        "required": [
          "address",
          "mask"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "mask": {
            "type": "number"
          }
        }
      },
      "SubclusterNetworkSettings": {
        "type": "object",
        "required": [
          "name",
          "addresses"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubclusterAddress"
            }
          }
        }
      },
      "SubclusterDetailedInfo": {
        "type": "object",
        "required": [
          "os",
          "product",
          "network"
        ],
        "properties": {
          "os": {
            "type": "string"
          },
          "uptime": {
            "type": "number"
          },
          "currentTime": {
            "type": "string"
          },
          "memory": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number"
              }
            }
          },
          "cpu": {
            "$ref": "#/components/schemas/SubclusterCPUInfo"
          },
          "diskPartitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubclusterDiskPartitionInfo"
            }
          },
          "product": {
            "type": "string"
          },
          "network": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubclusterNetworkSettings"
            }
          }
        }
      },
      "SubclusterItem": {
        "type": "object",
        "required": [
          "id",
          "name",
          "roles",
          "isUp",
          "hasLocalSettings",
          "detailedNodeInfo"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isUp": {
            "type": "boolean"
          },
          "hasLocalSettings": {
            "type": "boolean"
          },
          "detailedNodeInfo": {
            "$ref": "#/components/schemas/SubclusterDetailedInfo"
          },
          "attrs": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "Subclusters": {
        "type": "object",
        "required": [
          "nodes"
        ],
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubclusterItem"
            }
          }
        }
      },
      "RoleSettingsGroupItem": {
        "type": "object",
        "required": [
          "id",
          "uiName"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "uiName": {
            "type": "string"
          }
        }
      },
      "RoleServiceItem": {
        "type": "object",
        "required": [
          "name",
          "required",
          "unique",
          "atLeastOne",
          "subclusterUnique"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "unique": {
            "type": "boolean"
          },
          "atLeastOne": {
            "type": "boolean"
          },
          "subclusterUnique": {
            "type": "boolean"
          }
        }
      },
      "SubclusterRole": {
        "type": "object",
        "required": [
          "id",
          "settingGroups",
          "uiName",
          "unique",
          "subclusterUnique",
          "subclusterOnly",
          "subclusterRequires",
          "subclusterRequired",
          "subclusterForbidden",
          "nodeExcepts",
          "services"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "settingGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleSettingsGroupItem"
            }
          },
          "uiName": {
            "type": "string"
          },
          "unique": {
            "type": "boolean"
          },
          "subclusterUnique": {
            "type": "boolean"
          },
          "subclusterOnly": {
            "type": "boolean"
          },
          "subclusterRequires": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "subclusterRequired": {
            "type": "boolean"
          },
          "subclusterForbidden": {
            "type": "boolean"
          },
          "nodeExcepts": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleServiceItem"
            }
          },
          "disabled": {
            "type": "boolean"
          },
          "disableReason": {
            "type": "string"
          }
        }
      },
      "NodeRoleUpdateResult": {
        "type": "object",
        "required": [
          "success",
          "node"
        ],
        "properties": {
          "success": {
            "type": "boolean"
          },
          "node": {
            "type": "object",
            "required": [
              "id",
              "roles"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "roles": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Logs": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "time",
            "message"
          ],
          "properties": {
            "time": {
              "type": "number"
            },
            "level": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "marker": {
              "type": "string"
            }
          }
        }
      },
      "LogNodesWithServices": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "id",
            "services"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "services": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "Conntrack": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "protocol": {
              "type": "string"
            },
            "src": {
              "type": "string"
            },
            "dst": {
              "type": "string"
            },
            "sport": {
              "type": "string"
            },
            "dport": {
              "type": "string"
            }
          }
        }
      },
      "NodeScriptItem": {
        "type": "object",
        "required": [
          "name",
          "roles",
          "description",
          "readOnly",
          "icon"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "description": {
            "type": "string"
          },
          "readOnly": {
            "type": "boolean"
          },
          "icon": {
            "type": "string"
          }
        }
      },
      "NodeScriptsList": {
        "type": "object",
        "required": [
          "nodeId",
          "scripts"
        ],
        "properties": {
          "nodeId": {
            "type": "string"
          },
          "scripts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeScriptItem"
            }
          }
        }
      }
    },
    "parameters": {
      "idParameter": {
        "description": "Item id",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "offsetParameter": {
        "name": "offset",
        "description": "Offset of requested items.\nIf not specified, then by default 0.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "example": 0
      },
      "limitParameter": {
        "name": "limit",
        "description": "Limit of requested items.\nIf not specified, then by default 50.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "example": 50
      },
      "filterByNodeIdParameter": {
        "name": "filterByNodeId",
        "description": "Enables filtration by node identifier.\nIf parameter is not specified, then routes of all nodes will be listed.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": "dce29979-620c-453a-a693-62eb4792816a"
      },
      "filterByStatusParameter": {
        "name": "filterByStatus",
        "description": "Enables filtration by status.\nIt contains comma-separated list of required statuses. Supported values:\n  - active\n  - inactive\n\nIf it is not specified or empty, then routes for all statuses will be listed.\n",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ]
          }
        },
        "example": "active"
      },
      "queryParameter": {
        "name": "query",
        "description": "Substring for searching. Response will contain items which contains specified substring in the following fields:\n  - name\n  - network.address\n  - gateway\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "10.0.34."
      },
      "routeIdParameter": {
        "name": "id",
        "description": "Unique route identifier\n",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": "dce29979-620c-453a-a643-62eb4792817f"
      },
      "filterByNetTypeParameter": {
        "name": "filterByNetType",
        "description": "Enables filtration by Network Type.\nIt contains comma-separated list of required network types. Supported values:\n  - Host\n  - SubNet\n  - Default\n\nIf it is not specified or empty, then routes for all network types will be listed.\n",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Host",
              "SubNet",
              "Default"
            ]
          }
        },
        "example": "Host,SubNet"
      },
      "filterByEnabledParameter": {
        "name": "filterByEnabled",
        "description": "Enables filtration by enabled state.\nIf parameter is not specified, then all routes (enabled and disabled) will be listed.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "example": true
      },
      "layerIdParameter": {
        "description": "Item id",
        "name": "layerId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "ruleIdParameter": {
        "description": "Rule id",
        "name": "ruleId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "exclusionIdParameter": {
        "description": "Exclusion id",
        "name": "exclusionId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    }
  }
}
